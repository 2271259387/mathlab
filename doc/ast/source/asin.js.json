{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "pointwise",
            "range": [
              8,
              17
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 7
              },
              "end": {
                "line": 2,
                "column": 16
              }
            }
          },
          "range": [
            8,
            17
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 7
            },
            "end": {
              "line": 2,
              "column": 16
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./pointwise",
        "raw": "'./pointwise'",
        "range": [
          23,
          36
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 22
          },
          "end": {
            "line": 2,
            "column": 35
          }
        },
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Pointwise Math.asin(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * asin(1)\n * // Equals Math.asin(1)\n * asin([1, 2])\n * // Equals [Math.asin(1), Math.asin(2)]\n * asin([[1,2],[1,3]])\n * // Equals [ [Math.asin(1), Math.asin(2)], [Math.asin(1), Math.asin(3)] ]\n ",
            "range": [
              38,
              351
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 18,
                "column": 3
              }
            }
          }
        ]
      },
      "range": [
        1,
        352
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 0
        }
      }
    },
    {
      "type": "ExportDefaultDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": null,
        "params": [
          {
            "type": "Identifier",
            "name": "m",
            "range": [
              377,
              378
            ],
            "loc": {
              "start": {
                "line": 19,
                "column": 25
              },
              "end": {
                "line": 19,
                "column": 26
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "pointwise",
                    "range": [
                      391,
                      400
                    ],
                    "loc": {
                      "start": {
                        "line": 20,
                        "column": 9
                      },
                      "end": {
                        "line": 20,
                        "column": 18
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Math",
                        "range": [
                          401,
                          405
                        ],
                        "loc": {
                          "start": {
                            "line": 20,
                            "column": 19
                          },
                          "end": {
                            "line": 20,
                            "column": 23
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "asin",
                        "range": [
                          406,
                          410
                        ],
                        "loc": {
                          "start": {
                            "line": 20,
                            "column": 24
                          },
                          "end": {
                            "line": 20,
                            "column": 28
                          }
                        }
                      },
                      "range": [
                        401,
                        410
                      ],
                      "loc": {
                        "start": {
                          "line": 20,
                          "column": 19
                        },
                        "end": {
                          "line": 20,
                          "column": 28
                        }
                      }
                    }
                  ],
                  "range": [
                    391,
                    411
                  ],
                  "loc": {
                    "start": {
                      "line": 20,
                      "column": 9
                    },
                    "end": {
                      "line": 20,
                      "column": 29
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "m",
                    "range": [
                      412,
                      413
                    ],
                    "loc": {
                      "start": {
                        "line": 20,
                        "column": 30
                      },
                      "end": {
                        "line": 20,
                        "column": 31
                      }
                    }
                  }
                ],
                "range": [
                  391,
                  414
                ],
                "loc": {
                  "start": {
                    "line": 20,
                    "column": 9
                  },
                  "end": {
                    "line": 20,
                    "column": 32
                  }
                }
              },
              "range": [
                384,
                415
              ],
              "loc": {
                "start": {
                  "line": 20,
                  "column": 2
                },
                "end": {
                  "line": 21,
                  "column": 0
                }
              }
            }
          ],
          "range": [
            380,
            416
          ],
          "loc": {
            "start": {
              "line": 19,
              "column": 28
            },
            "end": {
              "line": 21,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          367,
          416
        ],
        "loc": {
          "start": {
            "line": 19,
            "column": 15
          },
          "end": {
            "line": 21,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Pointwise Math.asin(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * asin(1)\n * // Equals Math.asin(1)\n * asin([1, 2])\n * // Equals [Math.asin(1), Math.asin(2)]\n * asin([[1,2],[1,3]])\n * // Equals [ [Math.asin(1), Math.asin(2)], [Math.asin(1), Math.asin(3)] ]\n ",
            "range": [
              38,
              351
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 18,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "range": [
        352,
        416
      ],
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Pointwise Math.asin(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * asin(1)\n * // Equals Math.asin(1)\n * asin([1, 2])\n * // Equals [Math.asin(1), Math.asin(2)]\n * asin([[1,2],[1,3]])\n * // Equals [ [Math.asin(1), Math.asin(2)], [Math.asin(1), Math.asin(3)] ]\n ",
          "range": [
            38,
            351
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    1,
    416
  ],
  "loc": {
    "start": {
      "line": 2,
      "column": 0
    },
    "end": {
      "line": 21,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Pointwise Math.asin(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * asin(1)\n * // Equals Math.asin(1)\n * asin([1, 2])\n * // Equals [Math.asin(1), Math.asin(2)]\n * asin([[1,2],[1,3]])\n * // Equals [ [Math.asin(1), Math.asin(2)], [Math.asin(1), Math.asin(3)] ]\n ",
      "range": [
        38,
        351
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 3
        }
      }
    }
  ]
}