[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/abs.js",
    "memberof": null,
    "longname": "src/abs.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.abs(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * abs(1)\n * // Equals Math.abs(1)\n * abs([1, 2])\n * // Equals [Math.abs(1), Math.abs(2)]\n * abs([[1,2],[1,3]])\n * // Equals [ [Math.abs(1), Math.abs(2)], [Math.abs(1), Math.abs(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.abs)(m)\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "abs",
    "memberof": "src/abs.js",
    "longname": "src/abs.js~abs",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/abs.js",
    "importStyle": "abs",
    "description": "Pointwise Math.abs(x)",
    "examples": [
      "\nabs(1)\n// Equals Math.abs(1)\nabs([1, 2])\n// Equals [Math.abs(1), Math.abs(2)]\nabs([[1,2],[1,3]])\n// Equals [ [Math.abs(1), Math.abs(2)], [Math.abs(1), Math.abs(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 2,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/acos.js",
    "memberof": null,
    "longname": "src/acos.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.acos(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * acos(1)\n * // Equals Math.acos(1)\n * acos([1, 2])\n * // Equals [Math.acos(1), Math.acos(2)]\n * acos([[1,2],[1,3]])\n * // Equals [ [Math.acos(1), Math.acos(2)], [Math.acos(1), Math.acos(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.acos)(m)\n}\n"
  },
  {
    "__docId__": 3,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "acos",
    "memberof": "src/acos.js",
    "longname": "src/acos.js~acos",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/acos.js",
    "importStyle": "acos",
    "description": "Pointwise Math.acos(x)",
    "examples": [
      "\nacos(1)\n// Equals Math.acos(1)\nacos([1, 2])\n// Equals [Math.acos(1), Math.acos(2)]\nacos([[1,2],[1,3]])\n// Equals [ [Math.acos(1), Math.acos(2)], [Math.acos(1), Math.acos(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 4,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/add.js",
    "memberof": null,
    "longname": "src/add.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise add\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * add(1, 2)\n * // Equals 1 + 2\n * add([1, 2], [2, 2])\n * // Equals [1 + 2, 2 + 2]\n * add([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 + 2, 1 + 2], [1 + 2, 2 + 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x + y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 5,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "add",
    "memberof": "src/add.js",
    "longname": "src/add.js~add",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/add.js",
    "importStyle": "add",
    "description": "Pointwise add",
    "examples": [
      "\nadd(1, 2)\n// Equals 1 + 2\nadd([1, 2], [2, 2])\n// Equals [1 + 2, 2 + 2]\nadd([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 + 2, 1 + 2], [1 + 2, 2 + 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/and.js",
    "memberof": null,
    "longname": "src/and.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise and\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * and(1, 2)\n * // Equals 1 && 2\n * and([1, 2], [2, 2])\n * // Equals [1 && 2, 2 && 2]\n * and([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 && 2, 1 && 2], [1 && 2, 2 && 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x && y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 7,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "and",
    "memberof": "src/and.js",
    "longname": "src/and.js~and",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/and.js",
    "importStyle": "and",
    "description": "Pointwise and",
    "examples": [
      "\nand(1, 2)\n// Equals 1 && 2\nand([1, 2], [2, 2])\n// Equals [1 && 2, 2 && 2]\nand([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 && 2, 1 && 2], [1 && 2, 2 && 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/asin.js",
    "memberof": null,
    "longname": "src/asin.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.asin(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * asin(1)\n * // Equals Math.asin(1)\n * asin([1, 2])\n * // Equals [Math.asin(1), Math.asin(2)]\n * asin([[1,2],[1,3]])\n * // Equals [ [Math.asin(1), Math.asin(2)], [Math.asin(1), Math.asin(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.asin)(m)\n}\n"
  },
  {
    "__docId__": 9,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "asin",
    "memberof": "src/asin.js",
    "longname": "src/asin.js~asin",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/asin.js",
    "importStyle": "asin",
    "description": "Pointwise Math.asin(x)",
    "examples": [
      "\nasin(1)\n// Equals Math.asin(1)\nasin([1, 2])\n// Equals [Math.asin(1), Math.asin(2)]\nasin([[1,2],[1,3]])\n// Equals [ [Math.asin(1), Math.asin(2)], [Math.asin(1), Math.asin(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/atan.js",
    "memberof": null,
    "longname": "src/atan.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.atan(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * atan(1)\n * // Equals Math.atan(1)\n * atan([1, 2])\n * // Equals [Math.atan(1), Math.atan(2)]\n * atan([[1,2],[1,3]])\n * // Equals [ [Math.atan(1), Math.atan(2)], [Math.atan(1), Math.atan(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.atan)(m)\n}\n"
  },
  {
    "__docId__": 11,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "atan",
    "memberof": "src/atan.js",
    "longname": "src/atan.js~atan",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/atan.js",
    "importStyle": "atan",
    "description": "Pointwise Math.atan(x)",
    "examples": [
      "\natan(1)\n// Equals Math.atan(1)\natan([1, 2])\n// Equals [Math.atan(1), Math.atan(2)]\natan([[1,2],[1,3]])\n// Equals [ [Math.atan(1), Math.atan(2)], [Math.atan(1), Math.atan(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/atan2.js",
    "memberof": null,
    "longname": "src/atan2.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.atan2(x, y)\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * atan2(1, 2)\n * // Equals Math.atan2(1, 2)\n * atan2([1, 2], [2, 2])\n * // Equals [Math.atan2(1, 2), Math.atan2(2, 2)]\n * atan2([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [Math.atan2(2, 2), Math.atan2(1, 2)], [Math.atan2(1, 2), Math.atan2(2, 2)] ]\n */\nexport default function (m1, m2) { \n  return pointwise(Math.atan2)(m1, m2)\n}\n"
  },
  {
    "__docId__": 13,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "atan2",
    "memberof": "src/atan2.js",
    "longname": "src/atan2.js~atan2",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/atan2.js",
    "importStyle": "atan2",
    "description": "Pointwise Math.atan2(x, y)",
    "examples": [
      "\natan2(1, 2)\n// Equals Math.atan2(1, 2)\natan2([1, 2], [2, 2])\n// Equals [Math.atan2(1, 2), Math.atan2(2, 2)]\natan2([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [Math.atan2(2, 2), Math.atan2(1, 2)], [Math.atan2(1, 2), Math.atan2(2, 2)] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/band.js",
    "memberof": null,
    "longname": "src/band.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise band\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * band(1, 2)\n * // Equals 1 & 2\n * band([1, 2], [2, 2])\n * // Equals [1 & 2, 2 & 2]\n * band([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 & 2, 1 & 2], [1 & 2, 2 & 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x & y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 15,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "band",
    "memberof": "src/band.js",
    "longname": "src/band.js~band",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/band.js",
    "importStyle": "band",
    "description": "Pointwise band",
    "examples": [
      "\nband(1, 2)\n// Equals 1 & 2\nband([1, 2], [2, 2])\n// Equals [1 & 2, 2 & 2]\nband([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 & 2, 1 & 2], [1 & 2, 2 & 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bnot.js",
    "memberof": null,
    "longname": "src/bnot.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise bnot\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * bnot(1, 2)\n * // Equals 1 ~ 2\n * bnot([1, 2], [2, 2])\n * // Equals [1 ~ 2, 2 ~ 2]\n * bnot([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 ~ 2, 1 ~ 2], [1 ~ 2, 2 ~ 2] ]\n */\nexport default function (m) {\n  return pointwise(x => ~x)(m)\n}\n"
  },
  {
    "__docId__": 17,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "bnot",
    "memberof": "src/bnot.js",
    "longname": "src/bnot.js~bnot",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/bnot.js",
    "importStyle": "bnot",
    "description": "Pointwise bnot",
    "examples": [
      "\nbnot(1, 2)\n// Equals 1 ~ 2\nbnot([1, 2], [2, 2])\n// Equals [1 ~ 2, 2 ~ 2]\nbnot([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 ~ 2, 1 ~ 2], [1 ~ 2, 2 ~ 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bor.js",
    "memberof": null,
    "longname": "src/bor.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise bor\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * bor(1, 2)\n * // Equals 1 | 2\n * bor([1, 2], [2, 2])\n * // Equals [1 | 2, 2 | 2]\n * bor([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 | 2, 1 | 2], [1 | 2, 2 | 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x | y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 19,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "bor",
    "memberof": "src/bor.js",
    "longname": "src/bor.js~bor",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/bor.js",
    "importStyle": "bor",
    "description": "Pointwise bor",
    "examples": [
      "\nbor(1, 2)\n// Equals 1 | 2\nbor([1, 2], [2, 2])\n// Equals [1 | 2, 2 | 2]\nbor([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 | 2, 1 | 2], [1 | 2, 2 | 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bxor.js",
    "memberof": null,
    "longname": "src/bxor.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise bxor\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * bxor(1, 2)\n * // Equals 1 ^ 2\n * bxor([1, 2], [2, 2])\n * // Equals [1 ^ 2, 2 ^ 2]\n * bxor([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 ^ 2, 1 ^ 2], [1 ^ 2, 2 ^ 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x ^ y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 21,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "bxor",
    "memberof": "src/bxor.js",
    "longname": "src/bxor.js~bxor",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/bxor.js",
    "importStyle": "bxor",
    "description": "Pointwise bxor",
    "examples": [
      "\nbxor(1, 2)\n// Equals 1 ^ 2\nbxor([1, 2], [2, 2])\n// Equals [1 ^ 2, 2 ^ 2]\nbxor([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 ^ 2, 1 ^ 2], [1 ^ 2, 2 ^ 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/ceil.js",
    "memberof": null,
    "longname": "src/ceil.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.ceil(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * ceil(1)\n * // Equals Math.ceil(1)\n * ceil([1, 2])\n * // Equals [Math.ceil(1), Math.ceil(2)]\n * ceil([[1,2],[1,3]])\n * // Equals [ [Math.ceil(1), Math.ceil(2)], [Math.ceil(1), Math.ceil(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.ceil)(m)\n}\n"
  },
  {
    "__docId__": 23,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ceil",
    "memberof": "src/ceil.js",
    "longname": "src/ceil.js~ceil",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/ceil.js",
    "importStyle": "ceil",
    "description": "Pointwise Math.ceil(x)",
    "examples": [
      "\nceil(1)\n// Equals Math.ceil(1)\nceil([1, 2])\n// Equals [Math.ceil(1), Math.ceil(2)]\nceil([[1,2],[1,3]])\n// Equals [ [Math.ceil(1), Math.ceil(2)], [Math.ceil(1), Math.ceil(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/clone.js",
    "memberof": null,
    "longname": "src/clone.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise clone\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * clone(1, 2)\n * // Equals 1  2\n * clone([1, 2], [2, 2])\n * // Equals [1  2, 2  2]\n * clone([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2  2, 1  2], [1  2, 2  2] ]\n */\nexport default function (m) {\n  return pointwise(x => x)(m)\n}\n"
  },
  {
    "__docId__": 25,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "clone",
    "memberof": "src/clone.js",
    "longname": "src/clone.js~clone",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/clone.js",
    "importStyle": "clone",
    "description": "Pointwise clone",
    "examples": [
      "\nclone(1, 2)\n// Equals 1  2\nclone([1, 2], [2, 2])\n// Equals [1  2, 2  2]\nclone([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2  2, 1  2], [1  2, 2  2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/cos.js",
    "memberof": null,
    "longname": "src/cos.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.cos(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * cos(1)\n * // Equals Math.cos(1)\n * cos([1, 2])\n * // Equals [Math.cos(1), Math.cos(2)]\n * cos([[1,2],[1,3]])\n * // Equals [ [Math.cos(1), Math.cos(2)], [Math.cos(1), Math.cos(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.cos)(m)\n}\n"
  },
  {
    "__docId__": 27,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cos",
    "memberof": "src/cos.js",
    "longname": "src/cos.js~cos",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/cos.js",
    "importStyle": "cos",
    "description": "Pointwise Math.cos(x)",
    "examples": [
      "\ncos(1)\n// Equals Math.cos(1)\ncos([1, 2])\n// Equals [Math.cos(1), Math.cos(2)]\ncos([[1,2],[1,3]])\n// Equals [ [Math.cos(1), Math.cos(2)], [Math.cos(1), Math.cos(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/det.js",
    "memberof": null,
    "longname": "src/det.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "//\tDeterminant\nimport dim from './dim'\nimport clone from './clone'\n\n/**\n * Determinant of matix\n * \n * @export\n * @param {Array} x\n * @returns {Number}\n * @example\n * \n * det([[1, 2], [1, 2]])\n * // 0\n */\nexport default function det (x) {\n  var s = dim(x)\n  if (s.length !== 2 || s[0] !== s[1]) { throw new Error('det() only works on square matrices'); }\n  var n = s[0], ret = 1,i,j,k,A = clone(x),Aj,Ai,alpha,temp,k1,k2,k3\n  for (j = 0;j < n - 1;j++) {\n    k = j\n    for (i = j + 1;i < n;i++) { if (Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }\n    if (k !== j) {\n      temp = A[k]; A[k] = A[j]; A[j] = temp\n      ret *= -1\n    }\n    Aj = A[j]\n    for (i = j + 1;i < n;i++) {\n      Ai = A[i]\n      alpha = Ai[j] / Aj[j]\n      for (k = j + 1;k < n - 1;k += 2) {\n        k1 = k + 1\n        Ai[k] -= Aj[k] * alpha\n        Ai[k1] -= Aj[k1] * alpha\n      }\n      if (k !== n) { Ai[k] -= Aj[k] * alpha; }\n    }\n    if (Aj[j] === 0) { return 0; }\n    ret *= Aj[j]\n  }\n  return ret * A[j][j]\n}\n"
  },
  {
    "__docId__": 29,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "det",
    "memberof": "src/det.js",
    "longname": "src/det.js~det",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/det.js",
    "importStyle": "det",
    "description": "Determinant of matix",
    "examples": [
      "\ndet([[1, 2], [1, 2]])\n// 0"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/diag.js",
    "memberof": null,
    "longname": "src/diag.js",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "content": "/**\n * Create diagonal matrix from vector\n * \n * @param {Array} d\n * @returns {Array}\n * @example \n * \n * diag([1, 2])\n * // [[1, 0], \n * //  [0, 2]]\n */\nexport default function diag (d) {\n  var i, i1, j, n = d.length, A = Array(n), Ai\n  for (i = n - 1; i >= 0; i--) {\n    Ai = Array(n)\n    i1 = i + 2\n    for (j = n - 1; j >= i1; j -= 2) {\n      Ai[j] = 0\n      Ai[j - 1] = 0\n    }\n    if (j > i) { Ai[j] = 0; }\n    Ai[i] = d[i]\n    for (j = i - 1; j >= 1; j -= 2) {\n      Ai[j] = 0\n      Ai[j - 1] = 0\n    }\n    if (j === 0) { Ai[0] = 0; }\n    A[i] = Ai\n  }\n  return A\n}\n"
  },
  {
    "__docId__": 31,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "diag",
    "memberof": "src/diag.js",
    "longname": "src/diag.js~diag",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/diag.js",
    "importStyle": "diag",
    "description": "Create diagonal matrix from vector",
    "examples": [
      "\ndiag([1, 2])\n// [[1, 0], \n//  [0, 2]]"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/dim.js",
    "memberof": null,
    "longname": "src/dim.js",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "content": "/**\n * Get Array dimensions\n * \n * @export\n * @param {Array} x\n * @returns {Array}\n * @example \n * \n * dim([[1, 2, 3], [1, 2, 2]])\n * // [2, 3]\n */\nexport default function dim (x) {\n  if (typeof x === 'object') {\n    if (typeof x[0] === 'object') {\n      if (typeof x[0][0] === 'object') {\n        throw new Error('mathlab: only support two demitional matrix for now')\n      }\n      return [x.length, x[0].length]\n    }\n    return [x.length]\n  }\n  return []\n}\n"
  },
  {
    "__docId__": 33,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dim",
    "memberof": "src/dim.js",
    "longname": "src/dim.js~dim",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/dim.js",
    "importStyle": "dim",
    "description": "Get Array dimensions",
    "examples": [
      "\ndim([[1, 2, 3], [1, 2, 2]])\n// [2, 3]"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/div.js",
    "memberof": null,
    "longname": "src/div.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise div\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * div(1, 2)\n * // Equals 1 / 2\n * div([1, 2], [2, 2])\n * // Equals [1 / 2, 2 / 2]\n * div([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 / 2, 1 / 2], [1 / 2, 2 / 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x / y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 35,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "div",
    "memberof": "src/div.js",
    "longname": "src/div.js~div",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/div.js",
    "importStyle": "div",
    "description": "Pointwise div",
    "examples": [
      "\ndiv(1, 2)\n// Equals 1 / 2\ndiv([1, 2], [2, 2])\n// Equals [1 / 2, 2 / 2]\ndiv([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 / 2, 1 / 2], [1 / 2, 2 / 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/dot.js",
    "memberof": null,
    "longname": "src/dot.js",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "content": "// import dim from './dim'\n// import dotMMbig from './dotMMbig'\n// import dotMMsmall from './dotMMsmall'\n// import dotVV from './dotVV'\n// import dotVM from './dotVM'\n// import dotMV from './dotMV'\n// import mulVS from './mulVS'\n// import mulSV from './mulSV'\n\n// export default function dot (x, y) {\n//   var d = dim\n//   switch (d(x).length * 1000 + d(y).length) {\n//     case 2002:\n//       if (y.length < 10) return dotMMsmall(x, y)\n//       else return dotMMbig(x, y)\n//     case 2001:\n//       return dotMV(x, y)\n//     case 1002:\n//       return dotVM(x, y)\n//     case 1001:\n//       return dotVV(x, y)\n//     case 1000:\n//       return mulVS(x, y)\n//     case 1:\n//       return mulSV(x, y)\n//     case 0:\n//       return x * y\n//     default:\n//       throw new Error('dot() only works on vectors and matrices')\n//   }\n// }\n"
  },
  {
    "__docId__": 37,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/eig.js",
    "memberof": null,
    "longname": "src/eig.js",
    "access": null,
    "description": null,
    "lineNumber": 87,
    "content": "// export default function eig (A, maxiter) {\n//   var QH = numeric.toUpperHessenberg(A)\n//   var QB = numeric.QRFrancis(QH.H, maxiter)\n//   var T = numeric.T\n//   var n = A.length,i,k,flag = false,B = QB.B,H = numeric.dot(QB.Q, numeric.dot(QH.H, numeric.transpose(QB.Q)))\n//   var Q = new T(numeric.dot(QB.Q, QH.Q)), Q0\n//   var m = B.length,j\n//   var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2\n//   var sqrt = Math.sqrt\n//   for (k = 0;k < m;k++) {\n//     i = B[k][0]\n//     if (i === B[k][1]) {\n//       // nothing\n//     } else {\n//       j = i + 1\n//       a = H[i][i]\n//       b = H[i][j]\n//       c = H[j][i]\n//       d = H[j][j]\n//       if (b === 0 && c === 0) continue\n//       p1 = -a - d\n//       p2 = a * d - b * c\n//       disc = p1 * p1 - 4 * p2\n//       if (disc >= 0) {\n//         if (p1 < 0) x = -0.5 * (p1 - sqrt(disc))\n//         else x = -0.5 * (p1 + sqrt(disc))\n//         n1 = (a - x) * (a - x) + b * b\n//         n2 = c * c + (d - x) * (d - x)\n//         if (n1 > n2) {\n//           n1 = sqrt(n1)\n//           p = (a - x) / n1\n//           q = b / n1\n//         } else {\n//           n2 = sqrt(n2)\n//           p = c / n2\n//           q = (d - x) / n2\n//         }\n//         Q0 = new T([[q, -p], [p, q]])\n//         Q.setRows(i, j, Q0.dot(Q.getRows(i, j)))\n//       } else {\n//         x = -0.5 * p1\n//         y = 0.5 * sqrt(-disc)\n//         n1 = (a - x) * (a - x) + b * b\n//         n2 = c * c + (d - x) * (d - x)\n//         if (n1 > n2) {\n//           n1 = sqrt(n1 + y * y)\n//           p = (a - x) / n1\n//           q = b / n1\n//           x = 0\n//           y /= n1\n//         } else {\n//           n2 = sqrt(n2 + y * y)\n//           p = c / n2\n//           q = (d - x) / n2\n//           x = y / n2\n//           y = 0\n//         }\n//         Q0 = new T([[q, -p], [p, q]], [[x, y], [y, -x]])\n//         Q.setRows(i, j, Q0.dot(Q.getRows(i, j)))\n//       }\n//     }\n//   }\n//   var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n)\n//   for (j = 0;j < n;j++) {\n//     if (j > 0) {\n//       for (k = j - 1;k >= 0;k--) {\n//         var Rk = R.get([k, k]), Rj = R.get([j, j])\n//         if (numeric.neq(Rk.x, Rj.x) || numeric.neq(Rk.y, Rj.y)) {\n//           x = R.getRow(k).getBlock([k], [j - 1])\n//           y = E.getRow(j).getBlock([k], [j - 1])\n//           E.set([j, k], (R.get([k, j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)))\n//         } else {\n//           E.setRow(j, E.getRow(k))\n//           continue\n//         }\n//       }\n//     }\n//   }\n//   for (j = 0;j < n;j++) {\n//     x = E.getRow(j)\n//     E.setRow(j, x.div(x.norm2()))\n//   }\n//   E = E.transpose()\n//   E = Q.transjugate().dot(E)\n//   return { lambda: R.getDiag(), E: E }\n// }\n"
  },
  {
    "__docId__": 38,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/eq.js",
    "memberof": null,
    "longname": "src/eq.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise eq\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * eq(1, 2)\n * // Equals 1 === 2\n * eq([1, 2], [2, 2])\n * // Equals [1 === 2, 2 === 2]\n * eq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 === 2, 1 === 2], [1 === 2, 2 === 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x === y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 39,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "eq",
    "memberof": "src/eq.js",
    "longname": "src/eq.js~eq",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/eq.js",
    "importStyle": "eq",
    "description": "Pointwise eq",
    "examples": [
      "\neq(1, 2)\n// Equals 1 === 2\neq([1, 2], [2, 2])\n// Equals [1 === 2, 2 === 2]\neq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 === 2, 1 === 2], [1 === 2, 2 === 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/exp.js",
    "memberof": null,
    "longname": "src/exp.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.exp(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * exp(1)\n * // Equals Math.exp(1)\n * exp([1, 2])\n * // Equals [Math.exp(1), Math.exp(2)]\n * exp([[1,2],[1,3]])\n * // Equals [ [Math.exp(1), Math.exp(2)], [Math.exp(1), Math.exp(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.exp)(m)\n}\n"
  },
  {
    "__docId__": 41,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "exp",
    "memberof": "src/exp.js",
    "longname": "src/exp.js~exp",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/exp.js",
    "importStyle": "exp",
    "description": "Pointwise Math.exp(x)",
    "examples": [
      "\nexp(1)\n// Equals Math.exp(1)\nexp([1, 2])\n// Equals [Math.exp(1), Math.exp(2)]\nexp([[1,2],[1,3]])\n// Equals [ [Math.exp(1), Math.exp(2)], [Math.exp(1), Math.exp(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/floor.js",
    "memberof": null,
    "longname": "src/floor.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.floor(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * floor(1)\n * // Equals Math.floor(1)\n * floor([1, 2])\n * // Equals [Math.floor(1), Math.floor(2)]\n * floor([[1,2],[1,3]])\n * // Equals [ [Math.floor(1), Math.floor(2)], [Math.floor(1), Math.floor(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.floor)(m)\n}\n"
  },
  {
    "__docId__": 43,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "floor",
    "memberof": "src/floor.js",
    "longname": "src/floor.js~floor",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/floor.js",
    "importStyle": "floor",
    "description": "Pointwise Math.floor(x)",
    "examples": [
      "\nfloor(1)\n// Equals Math.floor(1)\nfloor([1, 2])\n// Equals [Math.floor(1), Math.floor(2)]\nfloor([[1,2],[1,3]])\n// Equals [ [Math.floor(1), Math.floor(2)], [Math.floor(1), Math.floor(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/geq.js",
    "memberof": null,
    "longname": "src/geq.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise geq\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * geq(1, 2)\n * // Equals 1 >= 2\n * geq([1, 2], [2, 2])\n * // Equals [1 >= 2, 2 >= 2]\n * geq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 >= 2, 1 >= 2], [1 >= 2, 2 >= 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x >= y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 45,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "geq",
    "memberof": "src/geq.js",
    "longname": "src/geq.js~geq",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/geq.js",
    "importStyle": "geq",
    "description": "Pointwise geq",
    "examples": [
      "\ngeq(1, 2)\n// Equals 1 >= 2\ngeq([1, 2], [2, 2])\n// Equals [1 >= 2, 2 >= 2]\ngeq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 >= 2, 1 >= 2], [1 >= 2, 2 >= 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/getDiag.js",
    "memberof": null,
    "longname": "src/getDiag.js",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "content": "/**\n * \tGet the diagonal of a matrix\n * \n * @export\n * @param {Array} A\n * @returns {Array}\n * @example \n * \n * getDiag([[1, 3], [0, 2]])\n * // [1, 2]\n */\nexport default function getDiag(A) {\n  var n = Math.min(A.length, A[0].length),i,ret = Array(n)\n  for (i = n - 1;i >= 1;--i) {\n    ret[i] = A[i][i]\n    --i\n    ret[i] = A[i][i]\n  }\n  if (i === 0) {\n    ret[0] = A[0][0]\n  }\n  return ret\n}\n"
  },
  {
    "__docId__": 47,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getDiag",
    "memberof": "src/getDiag.js",
    "longname": "src/getDiag.js~getDiag",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/getDiag.js",
    "importStyle": "getDiag",
    "description": "\tGet the diagonal of a matrix",
    "examples": [
      "\ngetDiag([[1, 3], [0, 2]])\n// [1, 2]"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gt.js",
    "memberof": null,
    "longname": "src/gt.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise gt\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * gt(1, 2)\n * // Equals 1 > 2\n * gt([1, 2], [2, 2])\n * // Equals [1 > 2, 2 > 2]\n * gt([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 > 2, 1 > 2], [1 > 2, 2 > 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x > y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 49,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "gt",
    "memberof": "src/gt.js",
    "longname": "src/gt.js~gt",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/gt.js",
    "importStyle": "gt",
    "description": "Pointwise gt",
    "examples": [
      "\ngt(1, 2)\n// Equals 1 > 2\ngt([1, 2], [2, 2])\n// Equals [1 > 2, 2 > 2]\ngt([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 > 2, 1 > 2], [1 > 2, 2 > 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/identity.js",
    "memberof": null,
    "longname": "src/identity.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "// import diag from './diag';\n// import rep from './rep';\n\n// /**\n//  * Generate identity matrix of given size\n//  * \n//  * @param {Number} n\n//  * @returns {Array}\n//  * @example \n//  * \n//  * identity(2)\n//  * // [[1, 0], [0, 1]]\n//  */\n// export default function identity (n) { \n//   return diag(rep([n], 1)); \n// }\n"
  },
  {
    "__docId__": 51,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/inv.js",
    "memberof": null,
    "longname": "src/inv.js",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "content": "// import dim from './dim'\n// import identity from './identity'\n// import clone from './clone'\n\n// /**\n//  * Inverse of an matrix\n//  * \n//  * @export\n//  * @param {Array} x\n//  * @returns {Array}\n//  * @example \n//  * \n//  * inv([[1,2],[3,4]])\n//  * // [[   -2,    1],\n//  * //  [  1.5, -0.5]]\n//  */\n// export default function inv (x) {\n//   var s = dim(x), abs = Math.abs, m = s[0], n = s[1]\n//   var A = clone(x), Ai, Aj\n//   var I = identity(m), Ii, Ij\n//   var i,j,k,x\n//   for (j = 0;j < n;++j) {\n//     var i0 = -1\n//     var v0 = -1\n//     for (i = j;i !== m;++i) { k = abs(A[i][j]); if (k > v0) { i0 = i; v0 = k; } }\n//     Aj = A[i0]; A[i0] = A[j]; A[j] = Aj\n//     Ij = I[i0]; I[i0] = I[j]; I[j] = Ij\n//     x = Aj[j]\n//     for (k = j;k !== n;++k)    Aj[k] /= x\n//     for (k = n - 1;k !== -1;--k) Ij[k] /= x\n//     for (i = m - 1;i !== -1;--i) {\n//       if (i !== j) {\n//         Ai = A[i]\n//         Ii = I[i]\n//         x = Ai[j]\n//         for (k = j + 1;k !== n;++k)  Ai[k] -= Aj[k] * x\n//         for (k = n - 1;k > 0;--k) { Ii[k] -= Ij[k] * x; --k; Ii[k] -= Ij[k] * x; }\n//         if (k === 0) Ii[0] -= Ij[0] * x\n//       }\n//     }\n//   }\n//   return I\n// }\n"
  },
  {
    "__docId__": 52,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/leq.js",
    "memberof": null,
    "longname": "src/leq.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise leq\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * leq(1, 2)\n * // Equals 1 <= 2\n * leq([1, 2], [2, 2])\n * // Equals [1 <= 2, 2 <= 2]\n * leq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 <= 2, 1 <= 2], [1 <= 2, 2 <= 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x <= y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 53,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "leq",
    "memberof": "src/leq.js",
    "longname": "src/leq.js~leq",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/leq.js",
    "importStyle": "leq",
    "description": "Pointwise leq",
    "examples": [
      "\nleq(1, 2)\n// Equals 1 <= 2\nleq([1, 2], [2, 2])\n// Equals [1 <= 2, 2 <= 2]\nleq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 <= 2, 1 <= 2], [1 <= 2, 2 <= 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/linspace.js",
    "memberof": null,
    "longname": "src/linspace.js",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "content": "/**\n * Generate evenly spaced values\n * \n * @export\n * @param {Number} a\n * @param {Number} b\n * @param {Number} n\n * @returns {Array}\n * @example \n * \n * linspace(1, 2, 3)\n * // [1, 1.5, 2]\n */\nexport default function linspace (a, b, n) {\n  if (typeof n === 'undefined') n = Math.max(Math.round(b - a) + 1, 1)\n  if (n < 2) {\n    return n === 1 ? [a] : []\n  }\n  var i,ret = Array(n)\n  n--\n  for (i = n;i >= 0;i--) {\n    ret[i] = (i * b + (n - i) * a) / n\n  }\n  return ret\n}\n"
  },
  {
    "__docId__": 55,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "linspace",
    "memberof": "src/linspace.js",
    "longname": "src/linspace.js~linspace",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/linspace.js",
    "importStyle": "linspace",
    "description": "Generate evenly spaced values",
    "examples": [
      "\nlinspace(1, 2, 3)\n// [1, 1.5, 2]"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/log.js",
    "memberof": null,
    "longname": "src/log.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.log(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * log(1)\n * // Equals Math.log(1)\n * log([1, 2])\n * // Equals [Math.log(1), Math.log(2)]\n * log([[1,2],[1,3]])\n * // Equals [ [Math.log(1), Math.log(2)], [Math.log(1), Math.log(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.log)(m)\n}\n"
  },
  {
    "__docId__": 57,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "log",
    "memberof": "src/log.js",
    "longname": "src/log.js~log",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/log.js",
    "importStyle": "log",
    "description": "Pointwise Math.log(x)",
    "examples": [
      "\nlog(1)\n// Equals Math.log(1)\nlog([1, 2])\n// Equals [Math.log(1), Math.log(2)]\nlog([[1,2],[1,3]])\n// Equals [ [Math.log(1), Math.log(2)], [Math.log(1), Math.log(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/lshift.js",
    "memberof": null,
    "longname": "src/lshift.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise lshift\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * lshift(1, 2)\n * // Equals 1 << 2\n * lshift([1, 2], [2, 2])\n * // Equals [1 << 2, 2 << 2]\n * lshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 << 2, 1 << 2], [1 << 2, 2 << 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x << y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 59,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lshift",
    "memberof": "src/lshift.js",
    "longname": "src/lshift.js~lshift",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/lshift.js",
    "importStyle": "lshift",
    "description": "Pointwise lshift",
    "examples": [
      "\nlshift(1, 2)\n// Equals 1 << 2\nlshift([1, 2], [2, 2])\n// Equals [1 << 2, 2 << 2]\nlshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 << 2, 1 << 2], [1 << 2, 2 << 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/lt.js",
    "memberof": null,
    "longname": "src/lt.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise lt\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * lt(1, 2)\n * // Equals 1 < 2\n * lt([1, 2], [2, 2])\n * // Equals [1 < 2, 2 < 2]\n * lt([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 < 2, 1 < 2], [1 < 2, 2 < 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x < y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 61,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lt",
    "memberof": "src/lt.js",
    "longname": "src/lt.js~lt",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/lt.js",
    "importStyle": "lt",
    "description": "Pointwise lt",
    "examples": [
      "\nlt(1, 2)\n// Equals 1 < 2\nlt([1, 2], [2, 2])\n// Equals [1 < 2, 2 < 2]\nlt([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 < 2, 1 < 2], [1 < 2, 2 < 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/mod.js",
    "memberof": null,
    "longname": "src/mod.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise mod\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * mod(1, 2)\n * // Equals 1 % 2\n * mod([1, 2], [2, 2])\n * // Equals [1 % 2, 2 % 2]\n * mod([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 % 2, 1 % 2], [1 % 2, 2 % 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x % y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 63,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mod",
    "memberof": "src/mod.js",
    "longname": "src/mod.js~mod",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/mod.js",
    "importStyle": "mod",
    "description": "Pointwise mod",
    "examples": [
      "\nmod(1, 2)\n// Equals 1 % 2\nmod([1, 2], [2, 2])\n// Equals [1 % 2, 2 % 2]\nmod([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 % 2, 1 % 2], [1 % 2, 2 % 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/mul.js",
    "memberof": null,
    "longname": "src/mul.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise mul\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * mul(1, 2)\n * // Equals 1 * 2\n * mul([1, 2], [2, 2])\n * // Equals [1 * 2, 2 * 2]\n * mul([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 * 2, 1 * 2], [1 * 2, 2 * 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x * y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 65,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mul",
    "memberof": "src/mul.js",
    "longname": "src/mul.js~mul",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/mul.js",
    "importStyle": "mul",
    "description": "Pointwise mul",
    "examples": [
      "\nmul(1, 2)\n// Equals 1 * 2\nmul([1, 2], [2, 2])\n// Equals [1 * 2, 2 * 2]\nmul([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 * 2, 1 * 2], [1 * 2, 2 * 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/neg.js",
    "memberof": null,
    "longname": "src/neg.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise neg\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * neg(1, 2)\n * // Equals 1 - 2\n * neg([1, 2], [2, 2])\n * // Equals [1 - 2, 2 - 2]\n * neg([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 - 2, 1 - 2], [1 - 2, 2 - 2] ]\n */\nexport default function (m) {\n  return pointwise(x => -x)(m)\n}\n"
  },
  {
    "__docId__": 67,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "neg",
    "memberof": "src/neg.js",
    "longname": "src/neg.js~neg",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/neg.js",
    "importStyle": "neg",
    "description": "Pointwise neg",
    "examples": [
      "\nneg(1, 2)\n// Equals 1 - 2\nneg([1, 2], [2, 2])\n// Equals [1 - 2, 2 - 2]\nneg([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 - 2, 1 - 2], [1 - 2, 2 - 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/neq.js",
    "memberof": null,
    "longname": "src/neq.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise neq\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * neq(1, 2)\n * // Equals 1 !== 2\n * neq([1, 2], [2, 2])\n * // Equals [1 !== 2, 2 !== 2]\n * neq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 !== 2, 1 !== 2], [1 !== 2, 2 !== 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x !== y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 69,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "neq",
    "memberof": "src/neq.js",
    "longname": "src/neq.js~neq",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/neq.js",
    "importStyle": "neq",
    "description": "Pointwise neq",
    "examples": [
      "\nneq(1, 2)\n// Equals 1 !== 2\nneq([1, 2], [2, 2])\n// Equals [1 !== 2, 2 !== 2]\nneq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 !== 2, 1 !== 2], [1 !== 2, 2 !== 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/not.js",
    "memberof": null,
    "longname": "src/not.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise not\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * not(1, 2)\n * // Equals 1 ! 2\n * not([1, 2], [2, 2])\n * // Equals [1 ! 2, 2 ! 2]\n * not([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 ! 2, 1 ! 2], [1 ! 2, 2 ! 2] ]\n */\nexport default function (m) {\n  return pointwise(x => !x)(m)\n}\n"
  },
  {
    "__docId__": 71,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "not",
    "memberof": "src/not.js",
    "longname": "src/not.js~not",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/not.js",
    "importStyle": "not",
    "description": "Pointwise not",
    "examples": [
      "\nnot(1, 2)\n// Equals 1 ! 2\nnot([1, 2], [2, 2])\n// Equals [1 ! 2, 2 ! 2]\nnot([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 ! 2, 1 ! 2], [1 ! 2, 2 ! 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/or.js",
    "memberof": null,
    "longname": "src/or.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise or\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * or(1, 2)\n * // Equals 1 || 2\n * or([1, 2], [2, 2])\n * // Equals [1 || 2, 2 || 2]\n * or([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 || 2, 1 || 2], [1 || 2, 2 || 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x || y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 73,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "or",
    "memberof": "src/or.js",
    "longname": "src/or.js~or",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/or.js",
    "importStyle": "or",
    "description": "Pointwise or",
    "examples": [
      "\nor(1, 2)\n// Equals 1 || 2\nor([1, 2], [2, 2])\n// Equals [1 || 2, 2 || 2]\nor([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 || 2, 1 || 2], [1 || 2, 2 || 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/pointwise.js",
    "memberof": null,
    "longname": "src/pointwise.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport dim from './dim'\n\n/**\n * Create a pointwise function\n * \n * @export\n * @param {Function} fun\n * @returns {Function}\n * @example \n * \n * function _inc (x) {\n *   return x + 1\n * }\n * const inc = pointwise(inc)\n * inc(1)                                  // 2\n * inc([1, 2])                             // [2, 3]\n * inc([[1, 2], [1, 3]])                   // [[2, 3], [2, 4]]\n * \n * \n * function _add (x, y) {\n *   return x + y\n * }\n * const add = pointwise(_add)\n * add(1, 2)                                // 3\n * add([1, 2], [1, 2])                      // [2, 4]\n * add([[1, 2], [1, 2]], [[1, 2], [1, 2]])  //[[2, 4], [2, 4]]\n */\nexport default function pointwise (fun) {\n  return function (...args) {\n    if(args.length === 0) { \n      throw new Error('mathlab: must provide arguments') \n    } else if (args.length === 1) {\n      const [m] = args\n      switch (dim(m).length) {\n        case 0:\n          return fun(m)\n        case 1:\n          return m.map(fun)\n        case 2:\n          return m.map(a => a.map(fun))\n        default:\n          throw new Error('mathlab: only support two demitional matrix')\n      }\n    } else if (args.length === 2) {\n      const [m1, m2] = args\n      if (dim(m1)[0] !== dim(m2)[0] || dim(m1)[1] !== dim(m2)[1]) {\n        throw new Error('mathlab: size of two matrices should be the same')\n      }\n      switch (dim(m1).length) {\n        case 0:\n          return fun(m1, m2)\n        case 1:\n          return m1.map((x, i) => fun(x, m2[i]))\n        case 2:\n          return m1.map( (mm1, i) => mm1.map( (x, j) => fun(x, m2[i][j]) ) )\n        default:\n          throw new Error('mathlab: only support two demitional matrix')\n      }      \n    }\n  }\n}\n"
  },
  {
    "__docId__": 75,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "pointwise",
    "memberof": "src/pointwise.js",
    "longname": "src/pointwise.js~pointwise",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/pointwise.js",
    "importStyle": "pointwise",
    "description": "Create a pointwise function",
    "examples": [
      "\nfunction _inc (x) {\n  return x + 1\n}\nconst inc = pointwise(inc)\ninc(1)                                  // 2\ninc([1, 2])                             // [2, 3]\ninc([[1, 2], [1, 3]])                   // [[2, 3], [2, 4]]\n\n\nfunction _add (x, y) {\n  return x + y\n}\nconst add = pointwise(_add)\nadd(1, 2)                                // 3\nadd([1, 2], [1, 2])                      // [2, 4]\nadd([[1, 2], [1, 2]], [[1, 2], [1, 2]])  //[[2, 4], [2, 4]]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fun",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/pow.js",
    "memberof": null,
    "longname": "src/pow.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.pow(x, y)\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * pow(1, 2)\n * // Equals Math.pow(1, 2)\n * pow([1, 2], [2, 2])\n * // Equals [Math.pow(1, 2), Math.pow(2, 2)]\n * pow([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [Math.pow(2, 2), Math.pow(1, 2)], [Math.pow(1, 2), Math.pow(2, 2)] ]\n */\nexport default function (m1, m2) { \n  return pointwise(Math.pow)(m1, m2)\n}\n"
  },
  {
    "__docId__": 77,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "pow",
    "memberof": "src/pow.js",
    "longname": "src/pow.js~pow",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/pow.js",
    "importStyle": "pow",
    "description": "Pointwise Math.pow(x, y)",
    "examples": [
      "\npow(1, 2)\n// Equals Math.pow(1, 2)\npow([1, 2], [2, 2])\n// Equals [Math.pow(1, 2), Math.pow(2, 2)]\npow([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [Math.pow(2, 2), Math.pow(1, 2)], [Math.pow(1, 2), Math.pow(2, 2)] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/round.js",
    "memberof": null,
    "longname": "src/round.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.round(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * round(1)\n * // Equals Math.round(1)\n * round([1, 2])\n * // Equals [Math.round(1), Math.round(2)]\n * round([[1,2],[1,3]])\n * // Equals [ [Math.round(1), Math.round(2)], [Math.round(1), Math.round(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.round)(m)\n}\n"
  },
  {
    "__docId__": 79,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "round",
    "memberof": "src/round.js",
    "longname": "src/round.js~round",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/round.js",
    "importStyle": "round",
    "description": "Pointwise Math.round(x)",
    "examples": [
      "\nround(1)\n// Equals Math.round(1)\nround([1, 2])\n// Equals [Math.round(1), Math.round(2)]\nround([[1,2],[1,3]])\n// Equals [ [Math.round(1), Math.round(2)], [Math.round(1), Math.round(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/rrshift.js",
    "memberof": null,
    "longname": "src/rrshift.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise rrshift\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * rrshift(1, 2)\n * // Equals 1 >>> 2\n * rrshift([1, 2], [2, 2])\n * // Equals [1 >>> 2, 2 >>> 2]\n * rrshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 >>> 2, 1 >>> 2], [1 >>> 2, 2 >>> 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x >>> y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 81,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "rrshift",
    "memberof": "src/rrshift.js",
    "longname": "src/rrshift.js~rrshift",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/rrshift.js",
    "importStyle": "rrshift",
    "description": "Pointwise rrshift",
    "examples": [
      "\nrrshift(1, 2)\n// Equals 1 >>> 2\nrrshift([1, 2], [2, 2])\n// Equals [1 >>> 2, 2 >>> 2]\nrrshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 >>> 2, 1 >>> 2], [1 >>> 2, 2 >>> 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/rshift.js",
    "memberof": null,
    "longname": "src/rshift.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise rshift\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * rshift(1, 2)\n * // Equals 1 >> 2\n * rshift([1, 2], [2, 2])\n * // Equals [1 >> 2, 2 >> 2]\n * rshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 >> 2, 1 >> 2], [1 >> 2, 2 >> 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x >> y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 83,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "rshift",
    "memberof": "src/rshift.js",
    "longname": "src/rshift.js~rshift",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/rshift.js",
    "importStyle": "rshift",
    "description": "Pointwise rshift",
    "examples": [
      "\nrshift(1, 2)\n// Equals 1 >> 2\nrshift([1, 2], [2, 2])\n// Equals [1 >> 2, 2 >> 2]\nrshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 >> 2, 1 >> 2], [1 >> 2, 2 >> 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sin.js",
    "memberof": null,
    "longname": "src/sin.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.sin(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * sin(1)\n * // Equals Math.sin(1)\n * sin([1, 2])\n * // Equals [Math.sin(1), Math.sin(2)]\n * sin([[1,2],[1,3]])\n * // Equals [ [Math.sin(1), Math.sin(2)], [Math.sin(1), Math.sin(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.sin)(m)\n}\n"
  },
  {
    "__docId__": 85,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sin",
    "memberof": "src/sin.js",
    "longname": "src/sin.js~sin",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/sin.js",
    "importStyle": "sin",
    "description": "Pointwise Math.sin(x)",
    "examples": [
      "\nsin(1)\n// Equals Math.sin(1)\nsin([1, 2])\n// Equals [Math.sin(1), Math.sin(2)]\nsin([[1,2],[1,3]])\n// Equals [ [Math.sin(1), Math.sin(2)], [Math.sin(1), Math.sin(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sqrt.js",
    "memberof": null,
    "longname": "src/sqrt.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.sqrt(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * sqrt(1)\n * // Equals Math.sqrt(1)\n * sqrt([1, 2])\n * // Equals [Math.sqrt(1), Math.sqrt(2)]\n * sqrt([[1,2],[1,3]])\n * // Equals [ [Math.sqrt(1), Math.sqrt(2)], [Math.sqrt(1), Math.sqrt(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.sqrt)(m)\n}\n"
  },
  {
    "__docId__": 87,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sqrt",
    "memberof": "src/sqrt.js",
    "longname": "src/sqrt.js~sqrt",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/sqrt.js",
    "importStyle": "sqrt",
    "description": "Pointwise Math.sqrt(x)",
    "examples": [
      "\nsqrt(1)\n// Equals Math.sqrt(1)\nsqrt([1, 2])\n// Equals [Math.sqrt(1), Math.sqrt(2)]\nsqrt([[1,2],[1,3]])\n// Equals [ [Math.sqrt(1), Math.sqrt(2)], [Math.sqrt(1), Math.sqrt(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sub.js",
    "memberof": null,
    "longname": "src/sub.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise sub\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * sub(1, 2)\n * // Equals 1 - 2\n * sub([1, 2], [2, 2])\n * // Equals [1 - 2, 2 - 2]\n * sub([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // Equals [ [2 - 2, 1 - 2], [1 - 2, 2 - 2] ]\n */\nexport default function (m1, m2) {\n  return pointwise((x, y) => x - y)(m1, m2)\n}\n"
  },
  {
    "__docId__": 89,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sub",
    "memberof": "src/sub.js",
    "longname": "src/sub.js~sub",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/sub.js",
    "importStyle": "sub",
    "description": "Pointwise sub",
    "examples": [
      "\nsub(1, 2)\n// Equals 1 - 2\nsub([1, 2], [2, 2])\n// Equals [1 - 2, 2 - 2]\nsub([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// Equals [ [2 - 2, 1 - 2], [1 - 2, 2 - 2] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tan.js",
    "memberof": null,
    "longname": "src/tan.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.tan(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * tan(1)\n * // Equals Math.tan(1)\n * tan([1, 2])\n * // Equals [Math.tan(1), Math.tan(2)]\n * tan([[1,2],[1,3]])\n * // Equals [ [Math.tan(1), Math.tan(2)], [Math.tan(1), Math.tan(3)] ]\n */\nexport default function (m) {\n  return pointwise(Math.tan)(m)\n}\n"
  },
  {
    "__docId__": 91,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tan",
    "memberof": "src/tan.js",
    "longname": "src/tan.js~tan",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/tan.js",
    "importStyle": "tan",
    "description": "Pointwise Math.tan(x)",
    "examples": [
      "\ntan(1)\n// Equals Math.tan(1)\ntan([1, 2])\n// Equals [Math.tan(1), Math.tan(2)]\ntan([[1,2],[1,3]])\n// Equals [ [Math.tan(1), Math.tan(2)], [Math.tan(1), Math.tan(3)] ]"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/transpose.js",
    "memberof": null,
    "longname": "src/transpose.js",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "content": "/**\n * Matrix transpose\n * \n * @export\n * @param {Array} x\n * @returns {Array}\n * @example \n * \n * transpose([[1,2,3],[4,5,6]])\n * //[[1,4],\n * // [2,5],\n * // [3,6]]\n */\nexport default function transpose (x) {\n  var i,j,m = x.length,n = x[0].length, ret = Array(n),A0,A1,Bj\n  for (j = 0;j < n;j++) ret[j] = Array(m)\n  for (i = m - 1;i >= 1;i -= 2) {\n    A1 = x[i]\n    A0 = x[i - 1]\n    for (j = n - 1;j >= 1;--j) {\n      Bj = ret[j]; Bj[i] = A1[j]; Bj[i - 1] = A0[j]\n      --j\n      Bj = ret[j]; Bj[i] = A1[j]; Bj[i - 1] = A0[j]\n    }\n    if (j === 0) {\n      Bj = ret[0]; Bj[i] = A1[0]; Bj[i - 1] = A0[0]\n    }\n  }\n  if (i === 0) {\n    A0 = x[0]\n    for (j = n - 1;j >= 1;--j) {\n      ret[j][0] = A0[j]\n      --j\n      ret[j][0] = A0[j]\n    }\n    if (j === 0) { ret[0][0] = A0[0]; }\n  }\n  return ret\n}\n"
  },
  {
    "__docId__": 93,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpose",
    "memberof": "src/transpose.js",
    "longname": "src/transpose.js~transpose",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/transpose.js",
    "importStyle": "transpose",
    "description": "Matrix transpose",
    "examples": [
      "\ntranspose([[1,2,3],[4,5,6]])\n//[[1,4],\n// [2,5],\n// [3,6]]"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 144,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 145,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 146,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 147,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 148,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 149,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 150,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]