[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Complex.js",
    "memberof": null,
    "longname": "src/Complex.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import identity from './identity';\nimport mul from './mul';\nimport div from './div';\nimport rep from './rep';\nimport clone from './clone';\nimport neg from './neg';\nimport add from './add';\nimport getBlock from './getBlock';\nimport setBlock from './setBlock';\nimport transpose from './transpose';\n\nexport default class Complex {\n  constructor(re, im) {\n    this.re = re;\n    this.im = im;\n  }\n\n  reciprocal() {\n    if(this.im) {\n        var d = add(mul(this.re,this.re),mul(this.im,this.im));\n        return new Complex(div(this.re, d),div(neg(this.im), d));\n    }\n    return new Complex(div(1, this.re));\n  }\n\n  identity(n) {\n    return new Complex(identity(n));\n  }\n  \n  transjugate() {\n    var t = transpose, x = this.re, y = this.im;\n    if(y) { return new Complex(t(x), negtranspose(y)); }\n    return new Complex(t(x));\n  }\n  \n  get(i) {\n    var x = this.re, y = this.im, k = 0, ik, n = i.length;\n    if(y) {\n        while(k<n) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        return new Complex(x,y);\n    }\n    while(k<n) {\n        ik = i[k];\n        x = x[ik];\n        k++;\n    }\n    return new Complex(x);\n  }\n  \n  set(i,v) {\n    var x = this.re, y = this.im, k = 0, ik, n = i.length, vx = v.re, vy = v.im;\n    if(n===0) {\n        if(vy) { this.im = vy; }\n        else if(y) { this.im = undefined; }\n        this.re = x;\n        return this;\n    }\n    if(vy) {\n        if(y) { /* ok */ }\n        else {\n            y = rep(dim(x),0);\n            this.im = y;\n        }\n        while(k<n-1) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        ik = i[k];\n        x[ik] = vx;\n        y[ik] = vy;\n        return this;\n    }\n    if(y) {\n        while(k<n-1) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        ik = i[k];\n        x[ik] = vx;\n        if(vx instanceof Array) y[ik] = rep(dim(vx),0);\n        else y[ik] = 0;\n        return this;\n    }\n    while(k<n-1) {\n        ik = i[k];\n        x = x[ik];\n        k++;\n    }\n    ik = i[k];\n    x[ik] = vx;\n    return this;\n  }\n\n  getRows(i0,i1) {\n    var n = i1-i0+1, j;\n    var rx = Array(n), ry, x = this.re, y = this.im;\n    for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }\n    if(y) {\n        ry = Array(n);\n        for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }\n        return new Complex(rx,ry);\n    }\n    return new Complex(rx);\n  }\n\n  setRows(i0,i1,A) {\n    var j;\n    var rx = this.re, ry = this.im, x = A.re, y = A.im;\n    for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }\n    if(y) {\n        if(!ry) { ry = rep(dim(rx),0); this.im = ry; }\n        for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }\n    } else if(ry) {\n        for(j=i0;j<=i1;j++) { ry[j] = rep([x[j-i0].length],0); }\n    }\n    return this;\n  }\n\n  getRow(k) {\n    var x = this.re, y = this.im;\n    if(y) { return new Complex(x[k],y[k]); }\n    return new Complex(x[k]);\n  }\n  setRow(i,v) {\n    var rx = this.re, ry = this.im, x = v.re, y = v.im;\n    rx[i] = x;\n    if(y) {\n        if(!ry) { ry = rep(dim(rx),0); this.im = ry; }\n        ry[i] = y;\n    } else if(ry) {\n        ry = rep([x.length],0);\n    }\n    return this;\n  }\n\n}\n\n/**\n * Generate identity complex structure matrix of given size\n * \n * @param {Number} n\n * @returns {Object}\n * @example \n * \n * Complex.identity(2)\n * // {x: [[1, 0], [0, 1]], y: undefined}\n */\nComplex.identity = function(n) {\n  return new Complex(identity(n));\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Complex",
    "memberof": "src/Complex.js",
    "longname": "src/Complex.js~Complex",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/Complex.js",
    "importStyle": "Complex",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "re",
        "types": [
          "*"
        ]
      },
      {
        "name": "im",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "re",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#re",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "im",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#im",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "reciprocal",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#reciprocal",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "identity",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#identity",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "transjugate",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#transjugate",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#get",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "set",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#set",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "v",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "im",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#im",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "im",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#im",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "re",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#re",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "im",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#im",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRows",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#getRows",
    "access": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "i0",
        "types": [
          "*"
        ]
      },
      {
        "name": "i1",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setRows",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#setRows",
    "access": null,
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "i0",
        "types": [
          "*"
        ]
      },
      {
        "name": "i1",
        "types": [
          "*"
        ]
      },
      {
        "name": "A",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "im",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#im",
    "access": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRow",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#getRow",
    "access": null,
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "k",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setRow",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#setRow",
    "access": null,
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "v",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "im",
    "memberof": "src/Complex.js~Complex",
    "longname": "src/Complex.js~Complex#im",
    "access": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "identity",
    "memberof": "src/Complex.js",
    "longname": "src/Complex.js~identity",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/Complex.js",
    "importStyle": null,
    "description": "Generate identity complex structure matrix of given size",
    "examples": [
      "\nComplex.identity(2)\n// {x: [[1, 0], [0, 1]], y: undefined}"
    ],
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Sparse.js",
    "memberof": null,
    "longname": "src/Sparse.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import dim from './dim'\nimport rep from './rep'\n\nexport default class Sparse {\n  constructor(A) {\n    if(!Array.isArray(A) && A.col){\n      this.col = A.col;\n      this.row = A.row;\n      this.val = A.val;\n    } else {\n      // TODO: throw error while A is not matrix\n      var m = A.length, n, foo, i, j, counts = [];\n      for (i = m - 1; i !== -1; --i) {\n        foo = A[i];\n        for (j in foo) {\n          j = parseInt(j);\n          while (j >= counts.length) counts[counts.length] = 0;\n          if (foo[j] !== 0) counts[j]++;\n        }\n      }\n      var n = counts.length;\n      var Ai = Array(n + 1);\n      Ai[0] = 0;\n      for (i = 0; i < n; ++i) Ai[i + 1] = Ai[i] + counts[i];\n      var Aj = Array(Ai[n]), Av = Array(Ai[n]);\n      for (i = m - 1; i !== -1; --i) {\n        foo = A[i];\n        for (j in foo) {\n          if (foo[j] !== 0) {\n            counts[j]--;\n            Aj[Ai[j] + counts[j]] = i;\n            Av[Ai[j] + counts[j]] = foo[j];\n          }\n        }\n      }\n\n      this.col = Ai;\n      this.row = Aj;\n      this.val = Av;\n    }\n  }\n\n  toFull() {\n    var Ai = this.col, Aj = this.row, Av = this.val, \n      s = dim(this), m = s[0], n = s[1], i,j,j0,j1,k;\n    var B = rep([m,n],0);\n    for(i=0;i<n;i++) {\n      j0 = Ai[i];\n      j1 = Ai[i+1];\n      for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }\n    }\n    return B;\n  }\n}\n\n// Sparse.diag = function (d) {\n//   // TODO\n//   var n = d.length,i,ret = Array(n),i1,i2,i3;\n//   for(i=n-1;i>=1;i-=2) {\n//     i1 = i-1;\n//     ret[i] = []; ret[i][i] = d[i];\n//     ret[i1] = []; ret[i1][i1] = d[i1];\n//   }\n//   if(i===0) { ret[0] = []; ret[0][0] = d[i]; }\n//   console.log(ret);\n// }\n\n"
  },
  {
    "__docId__": 22,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Sparse",
    "memberof": "src/Sparse.js",
    "longname": "src/Sparse.js~Sparse",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/Sparse.js",
    "importStyle": "Sparse",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 23,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Sparse.js~Sparse",
    "longname": "src/Sparse.js~Sparse#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "A",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "col",
    "memberof": "src/Sparse.js~Sparse",
    "longname": "src/Sparse.js~Sparse#col",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "row",
    "memberof": "src/Sparse.js~Sparse",
    "longname": "src/Sparse.js~Sparse#row",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "val",
    "memberof": "src/Sparse.js~Sparse",
    "longname": "src/Sparse.js~Sparse#val",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "col",
    "memberof": "src/Sparse.js~Sparse",
    "longname": "src/Sparse.js~Sparse#col",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "row",
    "memberof": "src/Sparse.js~Sparse",
    "longname": "src/Sparse.js~Sparse#row",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "val",
    "memberof": "src/Sparse.js~Sparse",
    "longname": "src/Sparse.js~Sparse#val",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toFull",
    "memberof": "src/Sparse.js~Sparse",
    "longname": "src/Sparse.js~Sparse#toFull",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/abs.js",
    "memberof": null,
    "longname": "src/abs.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Complex from './Complex'\nimport Sparse from './Sparse'\nimport mul from './mul'\nimport sqrt from './sqrt';\nimport add from './add';\n\nconst abs = pointwise(Math.abs)\n\nfunction cabs(x) {\n  if (x.im) {\n    return new Complex(sqrt(add(mul(x.re, x.re), mul(x.im, x.im))));\n  }\n  return new Complex(abs(x.re));\n}\n\nfunction sabs(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: abs(x.val),\n  })\n}\n\n/**\n * Pointwise Math.abs(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * abs(1)\n * // returns Math.abs(1)\n * abs([1, 2])\n * // returns [Math.abs(1), Math.abs(2)]\n * abs([[1,2],[1,3]])\n * // returns [ [Math.abs(1), Math.abs(2)], [Math.abs(1), Math.abs(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cabs(m);\n    case 'Sparse':\n      return sabs(m);\n    default:\n      return abs(m);\n  }\n}\n"
  },
  {
    "__docId__": 32,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "abs",
    "memberof": "src/abs.js",
    "longname": "src/abs.js~abs",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/abs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cabs",
    "memberof": "src/abs.js",
    "longname": "src/abs.js~cabs",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/abs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sabs",
    "memberof": "src/abs.js",
    "longname": "src/abs.js~sabs",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/abs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "abs",
    "memberof": "src/abs.js",
    "longname": "src/abs.js~abs",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/abs.js",
    "importStyle": "abs",
    "description": "Pointwise Math.abs(x)",
    "examples": [
      "\nabs(1)\n// returns Math.abs(1)\nabs([1, 2])\n// returns [Math.abs(1), Math.abs(2)]\nabs([[1,2],[1,3]])\n// returns [ [Math.abs(1), Math.abs(2)], [Math.abs(1), Math.abs(3)] ]"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/acos.js",
    "memberof": null,
    "longname": "src/acos.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Sparse from './Sparse'\n\nconst acos = pointwise(Math.acos)\n\nfunction cacos(x) {\n  throw new Error('mathlab.acos: no acos for complex number')\n}\n\nfunction sacos(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: acos(x.val),\n  })\n}\n\n/**\n * Pointwise Math.acos(x)\n * \n * @export\n * @param {Number|Vector|Multidimensional array|Matirx|Sparse|Complex} m\n * @returns {Number|Array}\n * @example \n * \n * acos(1)\n * // returns Math.acos(1)\n * acos([1, 2])\n * // returns [Math.acos(1), Math.acos(2)]\n * acos([[1,2],[1,3]])\n * // returns [ [Math.acos(1), Math.acos(2)], [Math.acos(1), Math.acos(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cacos(m);\n    case 'Sparse':\n      return sacos(m);\n    default:\n      return acos(m);\n  }\n}\n"
  },
  {
    "__docId__": 37,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "acos",
    "memberof": "src/acos.js",
    "longname": "src/acos.js~acos",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/acos.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 38,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cacos",
    "memberof": "src/acos.js",
    "longname": "src/acos.js~cacos",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/acos.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sacos",
    "memberof": "src/acos.js",
    "longname": "src/acos.js~sacos",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/acos.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "acos",
    "memberof": "src/acos.js",
    "longname": "src/acos.js~acos",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/acos.js",
    "importStyle": "acos",
    "description": "Pointwise Math.acos(x)",
    "examples": [
      "\nacos(1)\n// returns Math.acos(1)\nacos([1, 2])\n// returns [Math.acos(1), Math.acos(2)]\nacos([[1,2],[1,3]])\n// returns [ [Math.acos(1), Math.acos(2)], [Math.acos(1), Math.acos(3)] ]"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Vector",
          "Multidimensional array",
          "Matirx",
          "Sparse",
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/add.js",
    "memberof": null,
    "longname": "src/add.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\nimport Complex from './Complex'\n\nconst add = pointwise((x, y) => x + y);\n\nfunction cadd(x, y) {\n  if (!(y instanceof Complex)) { y = new Complex(y); }\n  if (x.im) {\n    if (y.im) {\n      return new Complex(add(x.re, y.re), add(x.im, y.im));\n    }\n    return new Complex(add(x.re, y.re), x.im);\n  }\n  if (y.im) {\n    return new Complex(add(x.re, y.re), y.im);\n  }\n  return new Complex(add(x.re, y.re));\n}\n\nfunction sadd(x, y) {\n  // TODO\n  throw new Error('mathlab.add: add for sparse matrix not exist')\n}\n\n/**\n * Pointwise add\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * add(1, 2)\n * // returns 1 + 2\n * add([1, 2], [2, 2])\n * // returns [1 + 2, 2 + 2]\n * add([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 + 2, 1 + 2], [1 + 2, 2 + 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cadd(m1, m2);\n    case 'Sparse':\n      return sadd(m1, m2);\n    default:\n      return add(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 42,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "add",
    "memberof": "src/add.js",
    "longname": "src/add.js~add",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/add.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cadd",
    "memberof": "src/add.js",
    "longname": "src/add.js~cadd",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/add.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sadd",
    "memberof": "src/add.js",
    "longname": "src/add.js~sadd",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/add.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "add",
    "memberof": "src/add.js",
    "longname": "src/add.js~add",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/add.js",
    "importStyle": "add",
    "description": "Pointwise add",
    "examples": [
      "\nadd(1, 2)\n// returns 1 + 2\nadd([1, 2], [2, 2])\n// returns [1 + 2, 2 + 2]\nadd([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 + 2, 1 + 2], [1 + 2, 2 + 2] ]"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/and.js",
    "memberof": null,
    "longname": "src/and.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst and = pointwise((x, y) => x && y);\n\nfunction cand(x, y) {\n  throw new Error('mathlab.and: no and for complex number')\n}\n\nfunction sand(x, y) {\n  // TODO\n  throw new Error('mathlab.and: and for sparse matrix not exist')\n}\n\n/**\n * Pointwise and\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * and(1, 2)\n * // returns 1 && 2\n * and([1, 2], [2, 2])\n * // returns [1 && 2, 2 && 2]\n * and([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 && 2, 1 && 2], [1 && 2, 2 && 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cand(m1, m2);\n    case 'Sparse':\n      return sand(m1, m2);\n    default:\n      return and(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 47,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "and",
    "memberof": "src/and.js",
    "longname": "src/and.js~and",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/and.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cand",
    "memberof": "src/and.js",
    "longname": "src/and.js~cand",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/and.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sand",
    "memberof": "src/and.js",
    "longname": "src/and.js~sand",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/and.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "and",
    "memberof": "src/and.js",
    "longname": "src/and.js~and",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/and.js",
    "importStyle": "and",
    "description": "Pointwise and",
    "examples": [
      "\nand(1, 2)\n// returns 1 && 2\nand([1, 2], [2, 2])\n// returns [1 && 2, 2 && 2]\nand([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 && 2, 1 && 2], [1 && 2, 2 && 2] ]"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/asin.js",
    "memberof": null,
    "longname": "src/asin.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Sparse from './Sparse'\n\nconst asin = pointwise(Math.asin)\n\nfunction casin(x) {\n  throw new Error('mathlab.asin: no asin for complex number')\n}\n\nfunction sasin(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: asin(x.val),\n  })\n}\n\n/**\n * Pointwise Math.asin(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * asin(1)\n * // returns Math.asin(1)\n * asin([1, 2])\n * // returns [Math.asin(1), Math.asin(2)]\n * asin([[1,2],[1,3]])\n * // returns [ [Math.asin(1), Math.asin(2)], [Math.asin(1), Math.asin(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return casin(m);\n    case 'Sparse':\n      return sasin(m);\n    default:\n      return asin(m);\n  }\n}\n"
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "asin",
    "memberof": "src/asin.js",
    "longname": "src/asin.js~asin",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/asin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "casin",
    "memberof": "src/asin.js",
    "longname": "src/asin.js~casin",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/asin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sasin",
    "memberof": "src/asin.js",
    "longname": "src/asin.js~sasin",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/asin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "asin",
    "memberof": "src/asin.js",
    "longname": "src/asin.js~asin",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/asin.js",
    "importStyle": "asin",
    "description": "Pointwise Math.asin(x)",
    "examples": [
      "\nasin(1)\n// returns Math.asin(1)\nasin([1, 2])\n// returns [Math.asin(1), Math.asin(2)]\nasin([[1,2],[1,3]])\n// returns [ [Math.asin(1), Math.asin(2)], [Math.asin(1), Math.asin(3)] ]"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/atan.js",
    "memberof": null,
    "longname": "src/atan.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Sparse from './Sparse'\n\nconst atan = pointwise(Math.atan)\n\nfunction catan(x) {\n  throw new Error('mathlab.atan: no atan for complex number')\n}\n\nfunction satan(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: atan(x.val),\n  })\n}\n\n/**\n * Pointwise Math.atan(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * atan(1)\n * // returns Math.atan(1)\n * atan([1, 2])\n * // returns [Math.atan(1), Math.atan(2)]\n * atan([[1,2],[1,3]])\n * // returns [ [Math.atan(1), Math.atan(2)], [Math.atan(1), Math.atan(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return catan(m);\n    case 'Sparse':\n      return satan(m);\n    default:\n      return atan(m);\n  }\n}\n"
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "atan",
    "memberof": "src/atan.js",
    "longname": "src/atan.js~atan",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/atan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "catan",
    "memberof": "src/atan.js",
    "longname": "src/atan.js~catan",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/atan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "satan",
    "memberof": "src/atan.js",
    "longname": "src/atan.js~satan",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/atan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "atan",
    "memberof": "src/atan.js",
    "longname": "src/atan.js~atan",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/atan.js",
    "importStyle": "atan",
    "description": "Pointwise Math.atan(x)",
    "examples": [
      "\natan(1)\n// returns Math.atan(1)\natan([1, 2])\n// returns [Math.atan(1), Math.atan(2)]\natan([[1,2],[1,3]])\n// returns [ [Math.atan(1), Math.atan(2)], [Math.atan(1), Math.atan(3)] ]"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/atan2.js",
    "memberof": null,
    "longname": "src/atan2.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.atan2(x, y)\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * atan2(1, 2)\n * // returns Math.atan2(1, 2)\n * atan2([1, 2], [2, 2])\n * // returns [Math.atan2(1, 2), Math.atan2(2, 2)]\n * atan2([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [Math.atan2(2, 2), Math.atan2(1, 2)], [Math.atan2(1, 2), Math.atan2(2, 2)] ]\n */\nexport default function (m1, m2) {\n  // TODO \n  return pointwise(Math.atan2)(m1, m2)\n}\n"
  },
  {
    "__docId__": 62,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "atan2",
    "memberof": "src/atan2.js",
    "longname": "src/atan2.js~atan2",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/atan2.js",
    "importStyle": "atan2",
    "description": "Pointwise Math.atan2(x, y)",
    "examples": [
      "\natan2(1, 2)\n// returns Math.atan2(1, 2)\natan2([1, 2], [2, 2])\n// returns [Math.atan2(1, 2), Math.atan2(2, 2)]\natan2([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [Math.atan2(2, 2), Math.atan2(1, 2)], [Math.atan2(1, 2), Math.atan2(2, 2)] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/band.js",
    "memberof": null,
    "longname": "src/band.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst band = pointwise((x, y) => x & y);\n\nfunction cband(x, y) {\n  throw new Error('mathlab.band: no band for complex number')\n}\n\nfunction sband(x, y) {\n  throw new Error('mathlab.band: band for sparse matrix not exist')\n}\n\n/**\n * Pointwise band\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * band(1, 2)\n * // returns 1 & 2\n * band([1, 2], [2, 2])\n * // returns [1 & 2, 2 & 2]\n * band([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 & 2, 1 & 2], [1 & 2, 2 & 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cband(m1, m2);\n    case 'Sparse':\n      return sband(m1, m2);\n    default:\n      return band(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "band",
    "memberof": "src/band.js",
    "longname": "src/band.js~band",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/band.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cband",
    "memberof": "src/band.js",
    "longname": "src/band.js~cband",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/band.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sband",
    "memberof": "src/band.js",
    "longname": "src/band.js~sband",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/band.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "band",
    "memberof": "src/band.js",
    "longname": "src/band.js~band",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/band.js",
    "importStyle": "band",
    "description": "Pointwise band",
    "examples": [
      "\nband(1, 2)\n// returns 1 & 2\nband([1, 2], [2, 2])\n// returns [1 & 2, 2 & 2]\nband([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 & 2, 1 & 2], [1 & 2, 2 & 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bnot.js",
    "memberof": null,
    "longname": "src/bnot.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Sparse from './Sparse'\n\nconst bnot = pointwise(x=> ~x);\n\nfunction cbnot(x) {\n  throw new Error('mathlab.bnot: no bnot for complex number')\n}\n\nfunction sbnot(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: bnot(x.val),\n  })\n}\n\n/**\n * Pointwise Math.bnot(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * bnot(1)\n * // returns Math.bnot(1)\n * bnot([1, 2])\n * // returns [Math.bnot(1), Math.bnot(2)]\n * bnot([[1,2],[1,3]])\n * // returns [ [Math.bnot(1), Math.bnot(2)], [Math.bnot(1), Math.bnot(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cbnot(m);\n    case 'Sparse':\n      return sbnot(m);\n    default:\n      return bnot(m);\n  }\n}\n"
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "bnot",
    "memberof": "src/bnot.js",
    "longname": "src/bnot.js~bnot",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/bnot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cbnot",
    "memberof": "src/bnot.js",
    "longname": "src/bnot.js~cbnot",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/bnot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sbnot",
    "memberof": "src/bnot.js",
    "longname": "src/bnot.js~sbnot",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/bnot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "bnot",
    "memberof": "src/bnot.js",
    "longname": "src/bnot.js~bnot",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/bnot.js",
    "importStyle": "bnot",
    "description": "Pointwise Math.bnot(x)",
    "examples": [
      "\nbnot(1)\n// returns Math.bnot(1)\nbnot([1, 2])\n// returns [Math.bnot(1), Math.bnot(2)]\nbnot([[1,2],[1,3]])\n// returns [ [Math.bnot(1), Math.bnot(2)], [Math.bnot(1), Math.bnot(3)] ]"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bor.js",
    "memberof": null,
    "longname": "src/bor.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst bor = pointwise((x, y) => x | y);\n\nfunction cbor(x, y) {\n  throw new Error('mathlab.bor: no bor for complex number')\n}\n\nfunction sbor(x, y) {\n  throw new Error('mathlab.bor: bor for sparse matrix not exist')\n}\n\n/**\n * Pointwise bor\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * bor(1, 2)\n * // returns 1 | 2\n * bor([1, 2], [2, 2])\n * // returns [1 | 2, 2 | 2]\n * bor([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 | 2, 1 | 2], [1 | 2, 2 | 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cbor(m1, m2);\n    case 'Sparse':\n      return sbor(m1, m2);\n    default:\n      return bor(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "bor",
    "memberof": "src/bor.js",
    "longname": "src/bor.js~bor",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/bor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cbor",
    "memberof": "src/bor.js",
    "longname": "src/bor.js~cbor",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/bor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sbor",
    "memberof": "src/bor.js",
    "longname": "src/bor.js~sbor",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/bor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "bor",
    "memberof": "src/bor.js",
    "longname": "src/bor.js~bor",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/bor.js",
    "importStyle": "bor",
    "description": "Pointwise bor",
    "examples": [
      "\nbor(1, 2)\n// returns 1 | 2\nbor([1, 2], [2, 2])\n// returns [1 | 2, 2 | 2]\nbor([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 | 2, 1 | 2], [1 | 2, 2 | 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bxor.js",
    "memberof": null,
    "longname": "src/bxor.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst bxor = pointwise((x, y) => x ^ y);\n\nfunction cbxor(x, y) {\n  throw new Error('mathlab.bxor: no bxor for complex number')\n}\n\nfunction sbxor(x, y) {\n  throw new Error('mathlab.bxor: bxor for sparse matrix not exist')\n}\n\n/**\n * Pointwise bxor\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * bxor(1, 2)\n * // returns 1 ^ 2\n * bxor([1, 2], [2, 2])\n * // returns [1 ^ 2, 2 ^ 2]\n * bxor([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 ^ 2, 1 ^ 2], [1 ^ 2, 2 ^ 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cbxor(m1, m2);\n    case 'Sparse':\n      return sbxor(m1, m2);\n    default:\n      return bxor(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "bxor",
    "memberof": "src/bxor.js",
    "longname": "src/bxor.js~bxor",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/bxor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cbxor",
    "memberof": "src/bxor.js",
    "longname": "src/bxor.js~cbxor",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/bxor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sbxor",
    "memberof": "src/bxor.js",
    "longname": "src/bxor.js~sbxor",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/bxor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "bxor",
    "memberof": "src/bxor.js",
    "longname": "src/bxor.js~bxor",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/bxor.js",
    "importStyle": "bxor",
    "description": "Pointwise bxor",
    "examples": [
      "\nbxor(1, 2)\n// returns 1 ^ 2\nbxor([1, 2], [2, 2])\n// returns [1 ^ 2, 2 ^ 2]\nbxor([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 ^ 2, 1 ^ 2], [1 ^ 2, 2 ^ 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/ceil.js",
    "memberof": null,
    "longname": "src/ceil.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Sparse from './Sparse'\n\nconst ceil = pointwise(Math.ceil)\n\nfunction cceil(x) {\n  throw new Error('mathlab.ceil: no ceil for complex number')\n}\n\nfunction sceil(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: ceil(x.val),\n  })\n}\n\n/**\n * Pointwise Math.ceil(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * ceil(1)\n * // returns Math.ceil(1)\n * ceil([1, 2])\n * // returns [Math.ceil(1), Math.ceil(2)]\n * ceil([[1,2],[1,3]])\n * // returns [ [Math.ceil(1), Math.ceil(2)], [Math.ceil(1), Math.ceil(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cceil(m);\n    case 'Sparse':\n      return sceil(m);\n    default:\n      return ceil(m);\n  }\n}\n"
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ceil",
    "memberof": "src/ceil.js",
    "longname": "src/ceil.js~ceil",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/ceil.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cceil",
    "memberof": "src/ceil.js",
    "longname": "src/ceil.js~cceil",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/ceil.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sceil",
    "memberof": "src/ceil.js",
    "longname": "src/ceil.js~sceil",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/ceil.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ceil",
    "memberof": "src/ceil.js",
    "longname": "src/ceil.js~ceil",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/ceil.js",
    "importStyle": "ceil",
    "description": "Pointwise Math.ceil(x)",
    "examples": [
      "\nceil(1)\n// returns Math.ceil(1)\nceil([1, 2])\n// returns [Math.ceil(1), Math.ceil(2)]\nceil([[1,2],[1,3]])\n// returns [ [Math.ceil(1), Math.ceil(2)], [Math.ceil(1), Math.ceil(3)] ]"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/clone.js",
    "memberof": null,
    "longname": "src/clone.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Sparse from './Sparse'\n\nconst clone = pointwise(x => x);\n\nfunction cclone(x) {\n  throw new Error('mathlab.clone: no clone for complex number')\n}\n\nfunction sclone(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: x.val.slice()\n  })}\n\n/**\n * Pointwise clone(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * clone(1)\n * // returns clone(1)\n * clone([1, 2])\n * // returns [clone(1), clone(2)]\n * clone([[1,2],[1,3]])\n * // returns [ [clone(1), clone(2)], [clone(1), clone(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cclone(m);\n    case 'Sparse':\n      return sclone(m);\n    default:\n      return clone(m);\n  }\n}\n"
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "clone",
    "memberof": "src/clone.js",
    "longname": "src/clone.js~clone",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/clone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cclone",
    "memberof": "src/clone.js",
    "longname": "src/clone.js~cclone",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/clone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sclone",
    "memberof": "src/clone.js",
    "longname": "src/clone.js~sclone",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/clone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "clone",
    "memberof": "src/clone.js",
    "longname": "src/clone.js~clone",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/clone.js",
    "importStyle": "clone",
    "description": "Pointwise clone(x)",
    "examples": [
      "\nclone(1)\n// returns clone(1)\nclone([1, 2])\n// returns [clone(1), clone(2)]\nclone([[1,2],[1,3]])\n// returns [ [clone(1), clone(2)], [clone(1), clone(3)] ]"
    ],
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/cos.js",
    "memberof": null,
    "longname": "src/cos.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Complex from './Complex'\nimport Sparse from './Sparse'\nimport neg from './neg'\nimport exp from './exp'\nimport div from './div'\nimport add from './add'\n\nconst cos = pointwise(Math.cos)\n\nfunction ccos(x) {\n  if (x.im) {\n    return div(add(exp(x), exp(neg(x))), 2);\n  }\n  return new Complex(cos(x.re));\n}\n\nfunction scos(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: cos(x.val),\n  })\n}\n\n/**\n * Pointwise Math.cos(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * cos(1)\n * // returns Math.cos(1)\n * cos([1, 2])\n * // returns [Math.cos(1), Math.cos(2)]\n * cos([[1,2],[1,3]])\n * // returns [ [Math.cos(1), Math.cos(2)], [Math.cos(1), Math.cos(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return ccos(m);\n    case 'Sparse':\n      return scos(m);\n    default:\n      return cos(m);\n  }\n}\n"
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "cos",
    "memberof": "src/cos.js",
    "longname": "src/cos.js~cos",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/cos.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ccos",
    "memberof": "src/cos.js",
    "longname": "src/cos.js~ccos",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/cos.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "scos",
    "memberof": "src/cos.js",
    "longname": "src/cos.js~scos",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/cos.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cos",
    "memberof": "src/cos.js",
    "longname": "src/cos.js~cos",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/cos.js",
    "importStyle": "cos",
    "description": "Pointwise Math.cos(x)",
    "examples": [
      "\ncos(1)\n// returns Math.cos(1)\ncos([1, 2])\n// returns [Math.cos(1), Math.cos(2)]\ncos([[1,2],[1,3]])\n// returns [ [Math.cos(1), Math.cos(2)], [Math.cos(1), Math.cos(3)] ]"
    ],
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/det.js",
    "memberof": null,
    "longname": "src/det.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "//\tDeterminant\nimport dim from './dim'\nimport clone from './clone'\n\n/**\n * Determinant of matix\n * \n * @export\n * @param {Array} x\n * @returns {Number}\n * @example\n * \n * det([[1, 2], [1, 2]])\n * // 0\n */\nexport default function det (x) {\n  // TODO\n  var s = dim(x)\n  if (s.length !== 2 || s[0] !== s[1]) { throw new Error('det() only works on square matrices'); }\n  var n = s[0], ret = 1,i,j,k,A = clone(x),Aj,Ai,alpha,temp,k1,k2,k3\n  for (j = 0;j < n - 1;j++) {\n    k = j\n    for (i = j + 1;i < n;i++) { if (Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }\n    if (k !== j) {\n      temp = A[k]; A[k] = A[j]; A[j] = temp\n      ret *= -1\n    }\n    Aj = A[j]\n    for (i = j + 1;i < n;i++) {\n      Ai = A[i]\n      alpha = Ai[j] / Aj[j]\n      for (k = j + 1;k < n - 1;k += 2) {\n        k1 = k + 1\n        Ai[k] -= Aj[k] * alpha\n        Ai[k1] -= Aj[k1] * alpha\n      }\n      if (k !== n) { Ai[k] -= Aj[k] * alpha; }\n    }\n    if (Aj[j] === 0) { return 0; }\n    ret *= Aj[j]\n  }\n  return ret * A[j][j]\n}\n"
  },
  {
    "__docId__": 99,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "det",
    "memberof": "src/det.js",
    "longname": "src/det.js~det",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/det.js",
    "importStyle": "det",
    "description": "Determinant of matix",
    "examples": [
      "\ndet([[1, 2], [1, 2]])\n// 0"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 100,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/diag.js",
    "memberof": null,
    "longname": "src/diag.js",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "content": "/**\n * Create diagonal matrix from vector\n * \n * @param {Array} d\n * @returns {Array}\n * @example \n * \n * diag([1, 2])\n * // [[1, 0], \n * //  [0, 2]]\n */\nexport default function diag (d) {\n  var i, i1, j, n = d.length, A = Array(n), Ai\n  for (i = n - 1; i >= 0; i--) {\n    Ai = Array(n)\n    i1 = i + 2\n    for (j = n - 1; j >= i1; j -= 2) {\n      Ai[j] = 0\n      Ai[j - 1] = 0\n    }\n    if (j > i) { Ai[j] = 0; }\n    Ai[i] = d[i]\n    for (j = i - 1; j >= 1; j -= 2) {\n      Ai[j] = 0\n      Ai[j - 1] = 0\n    }\n    if (j === 0) { Ai[0] = 0; }\n    A[i] = Ai\n  }\n  return A\n}\n"
  },
  {
    "__docId__": 101,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "diag",
    "memberof": "src/diag.js",
    "longname": "src/diag.js~diag",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/diag.js",
    "importStyle": "diag",
    "description": "Create diagonal matrix from vector",
    "examples": [
      "\ndiag([1, 2])\n// [[1, 0], \n//  [0, 2]]"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/dim.js",
    "memberof": null,
    "longname": "src/dim.js",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "content": "/**\n * Get Array dimensions\n * \n * @export\n * @param {Array} x\n * @returns {Array}\n * @example \n * \n * dim([[1, 2, 3], [1, 2, 2]])\n * // [2, 3]\n */\nexport default function(x) {\n  switch (x.constructor.name) {\n    case 'Complex':\n      return cdim(x);\n    case 'Sparse':\n      return sdim(x);\n    default:\n      return dim(x);\n  }\n}\n\nfunction cdim(x) {\n  if (x.re) {\n    return dim(x.re)\n  } else {\n    return dim(x.im)\n  }\n}\n\nfunction sdim(x) {\n  return [x.col.length-1, x.col.length-1];\n}\n\n\nfunction dim (x) {\n  if (typeof x === 'object') {\n    if (typeof x[0] === 'object') {\n      if (typeof x[0][0] === 'object') {\n        throw new Error('mathlab: only support two demitional matrix for now')\n      }\n      return [x.length, x[0].length]\n    }\n    return [x.length]\n  }\n  return []\n}\n"
  },
  {
    "__docId__": 103,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dim",
    "memberof": "src/dim.js",
    "longname": "src/dim.js~dim",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/dim.js",
    "importStyle": "dim",
    "description": "Get Array dimensions",
    "examples": [
      "\ndim([[1, 2, 3], [1, 2, 2]])\n// [2, 3]"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cdim",
    "memberof": "src/dim.js",
    "longname": "src/dim.js~cdim",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dim.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sdim",
    "memberof": "src/dim.js",
    "longname": "src/dim.js~sdim",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dim.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dim",
    "memberof": "src/dim.js",
    "longname": "src/dim.js~dim",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dim.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/div.js",
    "memberof": null,
    "longname": "src/div.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\nimport Complex from './Complex';\nimport mul from './mul';\n\nconst div = pointwise((x, y) => x / y);\n\nfunction cdiv(x, y) {\n  if (!(y instanceof Complex)) y = new Complex(y);\n  if (y.im) {\n    return mul(x, y.reciprocal()); \n  }\n  if (x.im) {\n    return new Complex(div(x.re, y.re), div(x.im, y.re)); }\n  return new Complex(div(x.re, y.re));\n}\n\nfunction sdiv(x, y) {\n  // TODO\n  throw new Error('mathlab.div: div for sparse matrix not exist')\n}\n\n/**\n * Pointwise div\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * div(1, 2)\n * // returns 1 / 2\n * div([1, 2], [2, 2])\n * // returns [1 / 2, 2 / 2]\n * div([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 / 2, 1 / 2], [1 / 2, 2 / 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cdiv(m1, m2);\n    case 'Sparse':\n      return sdiv(m1, m2);\n    default:\n      return div(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "div",
    "memberof": "src/div.js",
    "longname": "src/div.js~div",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/div.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cdiv",
    "memberof": "src/div.js",
    "longname": "src/div.js~cdiv",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/div.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 110,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sdiv",
    "memberof": "src/div.js",
    "longname": "src/div.js~sdiv",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/div.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "div",
    "memberof": "src/div.js",
    "longname": "src/div.js~div",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/div.js",
    "importStyle": "div",
    "description": "Pointwise div",
    "examples": [
      "\ndiv(1, 2)\n// returns 1 / 2\ndiv([1, 2], [2, 2])\n// returns [1 / 2, 2 / 2]\ndiv([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 / 2, 1 / 2], [1 / 2, 2 / 2] ]"
    ],
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/dot.js",
    "memberof": null,
    "longname": "src/dot.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import dim from './dim'\nimport add from './add'\nimport sub from './sub'\nimport Complex from './Complex'\n\n/**\n * \n * \n * @export\n * @param {Array | Number} x\n * @param {Array | Number} y\n * @returns {Array | Number}\n * @example\n * \n * dot([[1, 1], [2, 1]], [1, 2])\n * // [3, 4]\n * \n * dot([1, 2], 4)\n * // [4, 8]\n */\nexport default function (x, y) {\n  switch (x.constructor.name) {\n    case 'Complex':\n      return cdot(x, y);\n    case 'Sparse':\n      return sdot(x, y);\n    default:\n      return dot(x, y);\n  }\n}\n\nfunction cdot(x, y) {\n  if (!(y instanceof Complex)) { y = new Complex(y); }\n    if (x.im) {\n      if (y.im) {\n        return new Complex(sub(dot(x.re, y.re), dot(x.im, y.im)), add(dot(x.re, y.im), dot(x.im, y.re)));\n      }\n      return new Complex(dot(x.re, y.re), dot(x.im, y.re));\n    }\n    if (y.im) {\n      return new Complex(dot(x.re, y.re), dot(x.re, y.im));\n    }\n    return new Complex(dot(x.re, y.re));\n}\n\nfunction sdot(x, y) {\n    // TODO\n  throw new Error('mathlab.dot: dot for sparse matrix not exist')\n}\n\nfunction dot(x, y) {\n    var d = dim;\n    switch (d(x).length * 1000 + d(y).length) {\n        case 2002:\n            if (y.length < 10) return dotMMsmall(x, y);\n            else return dotMMbig(x, y);\n        case 2001:\n            return dotMV(x, y);\n        case 1002:\n            return dotVM(x, y);\n        case 1001:\n            return dotVV(x, y);\n        case 1000:\n            return mulVS(x, y);\n        case 1:\n            return mulSV(x, y);\n        case 0:\n            return x * y;\n        default:\n            throw new Error('dot only works on vectors and matrices');\n    }\n}\n\n\nfunction dotMMsmall(x, y) {\n    var i, j, k, p, q, r, ret, foo, bar, woo, i0, k0, p0, r0;\n    p = x.length;\n    q = y.length;\n    r = y[0].length;\n    ret = Array(p);\n    for (i = p - 1; i >= 0; i--) {\n        foo = Array(r);\n        bar = x[i];\n        for (k = r - 1; k >= 0; k--) {\n            woo = bar[q - 1] * y[q - 1][k];\n            for (j = q - 2; j >= 1; j -= 2) {\n                i0 = j - 1;\n                woo += bar[j] * y[j][k] + bar[i0] * y[i0][k];\n            }\n            if (j === 0) {\n                woo += bar[0] * y[0][k];\n            }\n            foo[k] = woo;\n        }\n        ret[i] = foo;\n    }\n    return ret;\n}\n\nfunction _getCol(A, j, x) {\n    var n = A.length,\n        i;\n    for (i = n - 1; i > 0; --i) {\n        x[i] = A[i][j];\n        --i;\n        x[i] = A[i][j];\n    }\n    if (i === 0) x[0] = A[0][j];\n}\n\nfunction dotMMbig(x, y) {\n    var gc = _getCol,\n        p = y.length,\n        v = Array(p);\n    var m = x.length,\n        n = y[0].length,\n        A = new Array(m),\n        xj;\n    var VV = dotVV;\n    var i, j, k, z;\n    --p;\n    --m;\n    for (i = m; i !== -1; --i) A[i] = Array(n);\n    --n;\n    for (i = n; i !== -1; --i) {\n        gc(y, i, v);\n        for (j = m; j !== -1; --j) {\n            z = 0;\n            xj = x[j];\n            A[j][i] = VV(xj, v);\n        }\n    }\n    return A;\n}\n\nfunction dotMV(x, y) {\n    var p = x.length,\n        q = y.length,\n        i;\n    var ret = Array(p);\n    for (i = p - 1; i >= 0; i--) {\n        ret[i] = dotVV(x[i], y);\n    }\n    return ret;\n}\n\nfunction dotVM(x, y) {\n    var i, j, k, p, q, r, ret, foo, bar, woo, i0, k0, p0, r0, s1, s2, s3, baz, accum;\n    p = x.length;\n    q = y[0].length;\n    ret = Array(q);\n    for (k = q - 1; k >= 0; k--) {\n        woo = x[p - 1] * y[p - 1][k];\n        for (j = p - 2; j >= 1; j -= 2) {\n            i0 = j - 1;\n            woo += x[j] * y[j][k] + x[i0] * y[i0][k];\n        }\n        if (j === 0) {\n            woo += x[0] * y[0][k];\n        }\n        ret[k] = woo;\n    }\n    return ret;\n}\n\nfunction dotVV(x, y) {\n    var i, n = x.length,\n        i1, ret = x[n - 1] * y[n - 1];\n    for (i = n - 2; i >= 1; i -= 2) {\n        i1 = i - 1;\n        ret += x[i] * y[i] + x[i1] * y[i1];\n    }\n    if (i === 0) {\n        ret += x[0] * y[0];\n    }\n    return ret;\n}\n\nfunction mulVV(x, y) {\n    var _n = y.length;\n    var i, ret = Array(_n);\n    for (i = _n - 1; i !== -1; --i) {\n        ret[i] = x[i] * y[i]\n    }\n    return ret;\n}\n\nfunction mulSV(x, y) {\n    var _n = y.length;\n    var i, ret = Array(_n);\n    for (i = _n - 1; i !== -1; --i) {\n        ret[i] = x * y[i]\n    }\n    return ret;\n}\n\nfunction mulVS(x, y) {\n    var _n = x.length;\n    var i, ret = Array(_n);\n    for (i = _n - 1; i !== -1; --i) {\n        ret[i] = x[i] * y\n    }\n    return ret;\n}"
  },
  {
    "__docId__": 113,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dot",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~dot",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/dot.js",
    "importStyle": "dot",
    "description": "",
    "examples": [
      "\ndot([[1, 1], [2, 1]], [1, 2])\n// [3, 4]\n\ndot([1, 2], 4)\n// [4, 8]"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array | Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array ",
          " Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array ",
          " Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array ",
        " Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cdot",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~cdot",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sdot",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~sdot",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 116,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dot",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~dot",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 117,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dotMMsmall",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~dotMMsmall",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_getCol",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~_getCol",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "A",
        "types": [
          "*"
        ]
      },
      {
        "name": "j",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dotMMbig",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~dotMMbig",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dotMV",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~dotMV",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dotVM",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~dotVM",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dotVV",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~dotVV",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 123,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mulVV",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~mulVV",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mulSV",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~mulSV",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mulVS",
    "memberof": "src/dot.js",
    "longname": "src/dot.js~mulVS",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/dot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/eig.js",
    "memberof": null,
    "longname": "src/eig.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import transpose from './transpose';\nimport Complex from './Complex'\nimport neq from './neq'\nimport clone from './clone'\nimport norm2 from './norm2'\nimport div from './div'\nimport dim from './dim'\nimport dot from './dot'\nimport add from './add'\nimport getBlock from './getBlock'\nimport tensor from './tensor'\nimport identity from './identity'\nimport epsilon from './epsilon'\nimport sub from './sub'\nimport mul from './mul'\nimport diag from './diag'\nimport rep from './rep'\nimport neg from './neg'\nimport getDiag from './getDiag'\n\n\n/**\n * Eigenvalues of real matrices\n * \n * @param {any} A\n * @param {any} maxiter\n * @returns\n */\nexport default function eig(A, maxiter) {\n  var QH = toUpperHessenberg(A);\n  var QB = QRFrancis(QH.H, maxiter);\n  var n = A.length,\n    i, k, flag = false,\n    B = QB.B,\n    H = dot(QB.Q, dot(QH.H, transpose(QB.Q)));\n  var Q = new Complex(dot(QB.Q, QH.Q)),\n    Q0;\n  var m = B.length,\n    j;\n  var a, b, c, d, p1, p2, disc, x, y, p, q, n1, n2;\n  var sqrt = Math.sqrt;\n  for (k = 0; k < m; k++) {\n    i = B[k][0];\n    if (i === B[k][1]) {\n      // nothing\n    } else {\n      j = i + 1;\n      a = H[i][i];\n      b = H[i][j];\n      c = H[j][i];\n      d = H[j][j];\n      if (b === 0 && c === 0) continue;\n      p1 = -a - d;\n      p2 = a * d - b * c;\n      disc = p1 * p1 - 4 * p2;\n      if (disc >= 0) {\n        if (p1 < 0) x = -0.5 * (p1 - sqrt(disc));\n        else x = -0.5 * (p1 + sqrt(disc));\n        n1 = (a - x) * (a - x) + b * b;\n        n2 = c * c + (d - x) * (d - x);\n        if (n1 > n2) {\n          n1 = sqrt(n1);\n          p = (a - x) / n1;\n          q = b / n1;\n        } else {\n          n2 = sqrt(n2);\n          p = c / n2;\n          q = (d - x) / n2;\n        }\n        Q0 = new Complex([\n          [q, -p],\n          [p, q]\n        ]);\n        Q.setRows(i, j, dot(Q0, Q.getRows(i, j)));\n      } else {\n        x = -0.5 * p1;\n        y = 0.5 * sqrt(-disc);\n        n1 = (a - x) * (a - x) + b * b;\n        n2 = c * c + (d - x) * (d - x);\n        if (n1 > n2) {\n          n1 = sqrt(n1 + y * y);\n          p = (a - x) / n1;\n          q = b / n1;\n          x = 0;\n          y /= n1;\n        } else {\n          n2 = sqrt(n2 + y * y);\n          p = c / n2;\n          q = (d - x) / n2;\n          x = y / n2;\n          y = 0;\n        }\n        Q0 = new Complex([\n          [q, -p],\n          [p, q]\n        ], [\n          [x, y],\n          [y, -x]\n        ]);\n        Q.setRows(i, j, dot(Q0, Q.getRows(i, j)));\n      }\n    }\n  }\n  var R = dot(dot(Q, A), Q.transjugate()),\n    n = A.length,\n    E = new Complex(identity(n));\n  for (j = 0; j < n; j++) {\n    if (j > 0) {\n      for (k = j - 1; k >= 0; k--) {\n        var Rk = R.get([k, k]),\n          Rj = R.get([j, j]);\n        if (neq(Rk.re, Rj.re) || neq(Rk.im, Rj.im)) {\n          x = getBlock(R.getRow(k), [k], [j - 1]);\n          y = getBlock(E.getRow(j), [k], [j - 1]);\n          E.set([j, k], div((sub(neg(R.get([k, j])), dot(x, y))), sub(Rk, Rj)));\n        } else {\n          E.setRow(j, E.getRow(k));\n          continue;\n        }\n      }\n    }\n  }\n  for (j = 0; j < n; j++) {\n    x = E.getRow(j);\n    E.setRow(j, div(x, norm2(x)));\n  }\n  E = transpose(E);\n  E = dot(Q.transjugate(),E);\n  return {\n    lambda: getDiag(R),\n    E: E\n  };\n};\n\nfunction house(x) {\n  var v = clone(x);\n  var s = x[0] >= 0 ? 1 : -1;\n  var alpha = s * norm2(x);\n  v[0] += alpha;\n  var foo = norm2(v);\n  if (foo === 0) { /* this should not happen */\n    throw new Error('eig: internal error');\n  }\n  return div(v, foo);\n}\n\nfunction toUpperHessenberg(me) {\n  var s = dim(me);\n  if (s.length !== 2 || s[0] !== s[1]) {\n    throw new Error('mathlab: toUpperHessenberg() only works on square matrices');\n  }\n  var m = s[0],\n    i, j, k, x, v, A = clone(me),\n    B, C, Ai, Ci, Q = identity(m),\n    Qi;\n  for (j = 0; j < m - 2; j++) {\n    x = Array(m - j - 1);\n    for (i = j + 1; i < m; i++) {\n      x[i - j - 1] = A[i][j];\n    }\n    if (norm2(x) > 0) {\n      v = house(x);\n      B = getBlock(A, [j + 1, j], [m - 1, m - 1]);\n      C = tensor(v, dot(v, B));\n      for (i = j + 1; i < m; i++) {\n        Ai = A[i];\n        Ci = C[i - j - 1];\n        for (k = j; k < m; k++) Ai[k] -= 2 * Ci[k - j];\n      }\n      B = getBlock(A, [0, j + 1], [m - 1, m - 1]);\n      C = tensor(dot(B, v), v);\n      for (i = 0; i < m; i++) {\n        Ai = A[i];\n        Ci = C[i];\n        for (k = j + 1; k < m; k++) Ai[k] -= 2 * Ci[k - j - 1];\n      }\n      B = Array(m - j - 1);\n      for (i = j + 1; i < m; i++) B[i - j - 1] = Q[i];\n      C = tensor(v, dot(v, B));\n      for (i = j + 1; i < m; i++) {\n        Qi = Q[i];\n        Ci = C[i - j - 1];\n        for (k = 0; k < m; k++) Qi[k] -= 2 * Ci[k];\n      }\n    }\n  }\n  return {\n    H: A,\n    Q: Q\n  };\n}\n\n\nfunction QRFrancis(H, maxiter) {\n  if (typeof maxiter === \"undefined\") {\n    maxiter = 10000;\n  }\n  H = clone(H);\n  var H0 = clone(H);\n  var s = dim(H),\n    m = s[0],\n    x, v, a, b, c, d, det, tr, Hloc, Q = identity(m),\n    Qi, Hi, B, C, Ci, i, j, k, iter;\n  if (m < 3) {\n    return {\n      Q: Q,\n      B: [\n        [0, m - 1]\n      ]\n    };\n  }\n  for (iter = 0; iter < maxiter; iter++) {\n    for (j = 0; j < m - 1; j++) {\n      if (Math.abs(H[j + 1][j]) < epsilon * (Math.abs(H[j][j]) + Math.abs(H[j + 1][j + 1]))) {\n        var QH1 = QRFrancis(getBlock(H, [0, 0], [j, j]), maxiter);\n        var QH2 = QRFrancis(getBlock(H, [j + 1, j + 1], [m - 1, m - 1]), maxiter);\n        B = Array(j + 1);\n        for (i = 0; i <= j; i++) {\n          B[i] = Q[i];\n        }\n        C = dot(QH1.Q, B);\n        for (i = 0; i <= j; i++) {\n          Q[i] = C[i];\n        }\n        B = Array(m - j - 1);\n        for (i = j + 1; i < m; i++) {\n          B[i - j - 1] = Q[i];\n        }\n        C = dot(QH2.Q, B);\n        for (i = j + 1; i < m; i++) {\n          Q[i] = C[i - j - 1];\n        }\n        return {\n          Q: Q,\n          B: QH1.B.concat(add(QH2.B, j + 1))\n        };\n      }\n    }\n    a = H[m - 2][m - 2];\n    b = H[m - 2][m - 1];\n    c = H[m - 1][m - 2];\n    d = H[m - 1][m - 1];\n    tr = a + d;\n    det = (a * d - b * c);\n    Hloc = getBlock(H, [0, 0], [2, 2]);\n    if (tr * tr >= 4 * det) {\n      var s1, s2;\n      s1 = 0.5 * (tr + Math.sqrt(tr * tr - 4 * det));\n      s2 = 0.5 * (tr - Math.sqrt(tr * tr - 4 * det));\n      Hloc = add(sub(dot(Hloc, Hloc),\n          mul(Hloc, s1 + s2)),\n        diag(rep([3], s1 * s2)));\n    } else {\n      Hloc = add(sub(dot(Hloc, Hloc),\n          mul(Hloc, tr)),\n        diag(rep([3], det)));\n    }\n    x = [Hloc[0][0], Hloc[1][0], Hloc[2][0]];\n    v = house(x);\n    B = [H[0], H[1], H[2]];\n    C = tensor(v, dot(v, B));\n    for (i = 0; i < 3; i++) {\n      Hi = H[i];\n      Ci = C[i];\n      for (k = 0; k < m; k++) Hi[k] -= 2 * Ci[k];\n    }\n    B = getBlock(H, [0, 0], [m - 1, 2]);\n    C = tensor(dot(B, v), v);\n    for (i = 0; i < m; i++) {\n      Hi = H[i];\n      Ci = C[i];\n      for (k = 0; k < 3; k++) Hi[k] -= 2 * Ci[k];\n    }\n    B = [Q[0], Q[1], Q[2]];\n    C = tensor(v, dot(v, B));\n    for (i = 0; i < 3; i++) {\n      Qi = Q[i];\n      Ci = C[i];\n      for (k = 0; k < m; k++) Qi[k] -= 2 * Ci[k];\n    }\n    var J;\n    for (j = 0; j < m - 2; j++) {\n      for (k = j; k <= j + 1; k++) {\n        if (Math.abs(H[k + 1][k]) < epsilon * (Math.abs(H[k][k]) + Math.abs(H[k + 1][k + 1]))) {\n          var QH1 = QRFrancis(getBlock(H, [0, 0], [k, k]), maxiter);\n          var QH2 = QRFrancis(getBlock(H, [k + 1, k + 1], [m - 1, m - 1]), maxiter);\n          B = Array(k + 1);\n          for (i = 0; i <= k; i++) {\n            B[i] = Q[i];\n          }\n          C = dot(QH1.Q, B);\n          for (i = 0; i <= k; i++) {\n            Q[i] = C[i];\n          }\n          B = Array(m - k - 1);\n          for (i = k + 1; i < m; i++) {\n            B[i - k - 1] = Q[i];\n          }\n          C = dot(QH2.Q, B);\n          for (i = k + 1; i < m; i++) {\n            Q[i] = C[i - k - 1];\n          }\n          return {\n            Q: Q,\n            B: QH1.B.concat(add(QH2.B, k + 1))\n          };\n        }\n      }\n      J = Math.min(m - 1, j + 3);\n      x = Array(J - j);\n      for (i = j + 1; i <= J; i++) {\n        x[i - j - 1] = H[i][j];\n      }\n      v = house(x);\n      B = getBlock(H, [j + 1, j], [J, m - 1]);\n      C = tensor(v, dot(v, B));\n      for (i = j + 1; i <= J; i++) {\n        Hi = H[i];\n        Ci = C[i - j - 1];\n        for (k = j; k < m; k++) Hi[k] -= 2 * Ci[k - j];\n      }\n      B = getBlock(H, [0, j + 1], [m - 1, J]);\n      C = tensor(dot(B, v), v);\n      for (i = 0; i < m; i++) {\n        Hi = H[i];\n        Ci = C[i];\n        for (k = j + 1; k <= J; k++) Hi[k] -= 2 * Ci[k - j - 1];\n      }\n      B = Array(J - j);\n      for (i = j + 1; i <= J; i++) B[i - j - 1] = Q[i];\n      C = tensor(v, dot(v, B));\n      for (i = j + 1; i <= J; i++) {\n        Qi = Q[i];\n        Ci = C[i - j - 1];\n        for (k = 0; k < m; k++) Qi[k] -= 2 * Ci[k];\n      }\n    }\n  }\n  throw new Error('mathlab: eigenvalue iteration does not converge -- increase maxiter?');\n}"
  },
  {
    "__docId__": 127,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "eig",
    "memberof": "src/eig.js",
    "longname": "src/eig.js~eig",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/eig.js",
    "importStyle": "eig",
    "description": "Eigenvalues of real matrices",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "maxiter",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "house",
    "memberof": "src/eig.js",
    "longname": "src/eig.js~house",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/eig.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 129,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "toUpperHessenberg",
    "memberof": "src/eig.js",
    "longname": "src/eig.js~toUpperHessenberg",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/eig.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "me",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 130,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "QRFrancis",
    "memberof": "src/eig.js",
    "longname": "src/eig.js~QRFrancis",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/eig.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "params": [
      {
        "name": "H",
        "types": [
          "*"
        ]
      },
      {
        "name": "maxiter",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/epsilon.js",
    "memberof": null,
    "longname": "src/epsilon.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * 2.220446049250313e-16\n * \n * @export\n */\nexport default 2.220446049250313e-16"
  },
  {
    "__docId__": 132,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/eq.js",
    "memberof": null,
    "longname": "src/eq.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst eq = pointwise((x, y) => x === y);\n\nfunction ceq(x, y) {\n  throw new Error('mathlab.eq: no eq for complex number')\n}\n\nfunction seq(x, y) {\n  throw new Error('mathlab.eq: eq for sparse matrix not exist')\n}\n\n/**\n * Pointwise eq\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * eq(1, 2)\n * // returns 1 === 2\n * eq([1, 2], [2, 2])\n * // returns [1 === 2, 2 === 2]\n * eq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 === 2, 1 === 2], [1 === 2, 2 === 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return ceq(m1, m2);\n    case 'Sparse':\n      return seq(m1, m2);\n    default:\n      return eq(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "eq",
    "memberof": "src/eq.js",
    "longname": "src/eq.js~eq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/eq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ceq",
    "memberof": "src/eq.js",
    "longname": "src/eq.js~ceq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/eq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "seq",
    "memberof": "src/eq.js",
    "longname": "src/eq.js~seq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/eq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 136,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "eq",
    "memberof": "src/eq.js",
    "longname": "src/eq.js~eq",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/eq.js",
    "importStyle": "eq",
    "description": "Pointwise eq",
    "examples": [
      "\neq(1, 2)\n// returns 1 === 2\neq([1, 2], [2, 2])\n// returns [1 === 2, 2 === 2]\neq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 === 2, 1 === 2], [1 === 2, 2 === 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 137,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/exp.js",
    "memberof": null,
    "longname": "src/exp.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport cos from './cos'\nimport sin from './sin'\nimport mul from './mul'\nimport Complex from './Complex'\nimport Sparse from './Sparse'\n\nconst exp = pointwise(Math.exp)\n\nfunction cexp(x) {\n  var ex = exp(x.re);\n  if (x.im) {\n    return new Complex(mul(cos(x.im), ex), mul(sin(x.im), ex));\n  }\n  return new Complex(ex);\n}\n\nfunction sexp(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: exp(x.val),\n  })\n}\n\n/**\n * Pointwise Math.exp(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * exp(1)\n * // returns Math.exp(1)\n * exp([1, 2])\n * // returns [Math.exp(1), Math.exp(2)]\n * exp([[1,2],[1,3]])\n * // returns [ [Math.exp(1), Math.exp(2)], [Math.exp(1), Math.exp(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cexp(m);\n    case 'Sparse':\n      return sexp(m);\n    default:\n      return exp(m);\n  }\n}\n"
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "exp",
    "memberof": "src/exp.js",
    "longname": "src/exp.js~exp",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/exp.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cexp",
    "memberof": "src/exp.js",
    "longname": "src/exp.js~cexp",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/exp.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sexp",
    "memberof": "src/exp.js",
    "longname": "src/exp.js~sexp",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/exp.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "exp",
    "memberof": "src/exp.js",
    "longname": "src/exp.js~exp",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/exp.js",
    "importStyle": "exp",
    "description": "Pointwise Math.exp(x)",
    "examples": [
      "\nexp(1)\n// returns Math.exp(1)\nexp([1, 2])\n// returns [Math.exp(1), Math.exp(2)]\nexp([[1,2],[1,3]])\n// returns [ [Math.exp(1), Math.exp(2)], [Math.exp(1), Math.exp(3)] ]"
    ],
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/fft.js",
    "memberof": null,
    "longname": "src/fft.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import rep from './rep';\nimport mul from './mul';\nimport clone from './clone';\nimport neg from './neg';\nimport Complex from './Complex';\nimport div from './div';\n\n/**\n * Fast Fourier transform \n * \n * @export\n * @param {any} m\n * @returns\n */\nexport function fft(m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cfft(m);\n    case 'Sparse':\n        throw new Error('mathlab.fft: fft for sparse matrix not done yet')\n    default:\n      return cfft(new Complex(m));\n  }\n}\n\n\n/**\n * Inverse FFT\n * \n * @export\n * @param {any} m\n * @returns\n */\nexport function ifft(m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cifft(m);\n    case 'Sparse':\n        throw new Error('mathlab.ifft: ifft for sparse matrix not done yet')\n    default:\n      return cifft(new Complex(m));\n  }\n}\n\n\n\nfunction cfft(cplx) {\n\tvar x = cplx.re, y = cplx.im;\n\tvar n = x.length, log = Math.log, log2 = log(2),\n\t\t\tp = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);\n\tvar cx = rep([m],0), cy = rep([m],0), cos = Math.cos, sin = Math.sin;\n\tvar k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;\n\tvar a = rep([m],0), b = rep([m],0),nhalf = Math.floor(n/2);\n\tfor(k=0;k<n;k++) a[k] = x[k];\n\tif(typeof y !== \"undefined\") for(k=0;k<n;k++) b[k] = y[k];\n\tcx[0] = 1;\n\tfor(k=1;k<=m/2;k++) {\n\t\tt = c*k*k;\n\t\tcx[k] = cos(t);\n\t\tcy[k] = sin(t);\n\t\tcx[m-k] = cos(t);\n\t\tcy[m-k] = sin(t)\n\t}\n\tvar X = new Complex(a,b), Y = new Complex(cx,cy);\n\tX = mul(X, Y);\n\tconvpow2(X.re, X.im, clone(Y.re), neg(Y.im));\n\tX = mul(X, Y);\n\tX.re.length = n;\n\tX.im.length = n;\n\treturn X;\n}\n\nfunction cifft(cplx) {\n\tvar x = cplx.re, y = cplx.im;\n\tvar n = x.length, log = Math.log, log2 = log(2),\n\t\t\tp = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);\n\tvar cx = rep([m],0), cy = rep([m],0), cos = Math.cos, sin = Math.sin;\n\tvar k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;\n\tvar a = rep([m],0), b = rep([m],0),nhalf = Math.floor(n/2);\n\tfor(k=0;k<n;k++) a[k] = x[k];\n\tif(typeof y !== \"undefined\") for(k=0;k<n;k++) b[k] = y[k];\n\tcx[0] = 1;\n\tfor(k=1;k<=m/2;k++) {\n\t\tt = c*k*k;\n\t\tcx[k] = cos(t);\n\t\tcy[k] = sin(t);\n\t\tcx[m-k] = cos(t);\n\t\tcy[m-k] = sin(t)\n\t}\n\tvar X = new Complex(a,b), Y = new Complex(cx,cy);\n\tX = mul(X, Y);\n\tconvpow2(X.re, X.im, clone(Y.re), neg(Y.im));\n\tX = mul(X, Y);\n\tX.re.length = n;\n\tX.im.length = n;\n\treturn div(X, n);\n}\n\n\n\nfunction fftpow2(x,y) {\n    var n = x.length;\n    if(n === 1) return;\n    var cos = Math.cos, sin = Math.sin, i,j;\n    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);\n    j = n/2;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        xo[j] = x[i];\n        yo[j] = y[i];\n        --i;\n        xe[j] = x[i];\n        ye[j] = y[i];\n    }\n    fftpow2(xe,ye);\n    fftpow2(xo,yo);\n    j = n/2;\n    var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        if(j === -1) j = n/2-1;\n        t = k*i;\n        ci = cos(t);\n        si = sin(t);\n        x[i] = xe[j] + ci*xo[j] - si*yo[j];\n        y[i] = ye[j] + ci*yo[j] + si*xo[j];\n    }\n}\n\nfunction _ifftpow2(x,y) {\n    var n = x.length;\n    if(n === 1) return;\n    var cos = Math.cos, sin = Math.sin, i,j;\n    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);\n    j = n/2;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        xo[j] = x[i];\n        yo[j] = y[i];\n        --i;\n        xe[j] = x[i];\n        ye[j] = y[i];\n    }\n    _ifftpow2(xe,ye);\n    _ifftpow2(xo,yo);\n    j = n/2;\n    var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        if(j === -1) j = n/2-1;\n        t = k*i;\n        ci = cos(t);\n        si = sin(t);\n        x[i] = xe[j] + ci*xo[j] - si*yo[j];\n        y[i] = ye[j] + ci*yo[j] + si*xo[j];\n    }\n}\n\nfunction ifftpow2(x,y) {\n    _ifftpow2(x, y);\n    // x = div(x, x.length);\n    // y = div(y, y.length);\n    x.forEach((n, i) => {x[i] = n / x.length});\n    y.forEach((n, i) => {y[i] = n / y.length});\n}\n\nfunction convpow2(ax,ay,bx,by) {\n    fftpow2(ax,ay);\n    fftpow2(bx,by);\n    var i,n = ax.length,axi,bxi,ayi,byi;\n    for(i=n-1;i!==-1;--i) {\n        axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];\n        ax[i] = axi*bxi-ayi*byi;\n        ay[i] = axi*byi+ayi*bxi;\n    }\n    ifftpow2(ax,ay);\n}\n\n"
  },
  {
    "__docId__": 143,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "fft",
    "memberof": "src/fft.js",
    "longname": "src/fft.js~fft",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/fft.js",
    "importStyle": "{fft}",
    "description": "Fast Fourier transform ",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ifft",
    "memberof": "src/fft.js",
    "longname": "src/fft.js~ifft",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/fft.js",
    "importStyle": "{ifft}",
    "description": "Inverse FFT",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cfft",
    "memberof": "src/fft.js",
    "longname": "src/fft.js~cfft",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/fft.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "cplx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cifft",
    "memberof": "src/fft.js",
    "longname": "src/fft.js~cifft",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/fft.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "cplx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 147,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "fftpow2",
    "memberof": "src/fft.js",
    "longname": "src/fft.js~fftpow2",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/fft.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_ifftpow2",
    "memberof": "src/fft.js",
    "longname": "src/fft.js~_ifftpow2",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/fft.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ifftpow2",
    "memberof": "src/fft.js",
    "longname": "src/fft.js~ifftpow2",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/fft.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "convpow2",
    "memberof": "src/fft.js",
    "longname": "src/fft.js~convpow2",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/fft.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "ax",
        "types": [
          "*"
        ]
      },
      {
        "name": "ay",
        "types": [
          "*"
        ]
      },
      {
        "name": "bx",
        "types": [
          "*"
        ]
      },
      {
        "name": "by",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 151,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/floor.js",
    "memberof": null,
    "longname": "src/floor.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Sparse from './Sparse'\n\nconst floor = pointwise(Math.floor)\n\nfunction cfloor(x) {\n  throw new Error('mathlab.floor: no floor for complex number')\n}\n\nfunction sfloor(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: floor(x.val),\n  })\n}\n/**\n * Pointwise Math.floor(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * floor(1)\n * // returns Math.floor(1)\n * floor([1, 2])\n * // returns [Math.floor(1), Math.floor(2)]\n * floor([[1,2],[1,3]])\n * // returns [ [Math.floor(1), Math.floor(2)], [Math.floor(1), Math.floor(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cfloor(m);\n    case 'Sparse':\n      return sfloor(m);\n    default:\n      return floor(m);\n  }\n}\n"
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "floor",
    "memberof": "src/floor.js",
    "longname": "src/floor.js~floor",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/floor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cfloor",
    "memberof": "src/floor.js",
    "longname": "src/floor.js~cfloor",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/floor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sfloor",
    "memberof": "src/floor.js",
    "longname": "src/floor.js~sfloor",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/floor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 155,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "floor",
    "memberof": "src/floor.js",
    "longname": "src/floor.js~floor",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/floor.js",
    "importStyle": "floor",
    "description": "Pointwise Math.floor(x)",
    "examples": [
      "\nfloor(1)\n// returns Math.floor(1)\nfloor([1, 2])\n// returns [Math.floor(1), Math.floor(2)]\nfloor([[1,2],[1,3]])\n// returns [ [Math.floor(1), Math.floor(2)], [Math.floor(1), Math.floor(3)] ]"
    ],
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 156,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/geq.js",
    "memberof": null,
    "longname": "src/geq.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst geq = pointwise((x, y) => x >= y);\n\nfunction cgeq(x, y) {\n  throw new Error('mathlab.geq: no geq for complex number')\n}\n\nfunction sgeq(x, y) {\n  throw new Error('mathlab.geq: geq for sparse matrix not exist')\n}\n\n/**\n * Pointwise geq\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * geq(1, 2)\n * // returns 1 >= 2\n * geq([1, 2], [2, 2])\n * // returns [1 >= 2, 2 >= 2]\n * geq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 >= 2, 1 >= 2], [1 >= 2, 2 >= 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cgeq(m1, m2);\n    case 'Sparse':\n      return sgeq(m1, m2);\n    default:\n      return geq(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "geq",
    "memberof": "src/geq.js",
    "longname": "src/geq.js~geq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/geq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cgeq",
    "memberof": "src/geq.js",
    "longname": "src/geq.js~cgeq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/geq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sgeq",
    "memberof": "src/geq.js",
    "longname": "src/geq.js~sgeq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/geq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "geq",
    "memberof": "src/geq.js",
    "longname": "src/geq.js~geq",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/geq.js",
    "importStyle": "geq",
    "description": "Pointwise geq",
    "examples": [
      "\ngeq(1, 2)\n// returns 1 >= 2\ngeq([1, 2], [2, 2])\n// returns [1 >= 2, 2 >= 2]\ngeq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 >= 2, 1 >= 2], [1 >= 2, 2 >= 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 161,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/getBlock.js",
    "memberof": null,
    "longname": "src/getBlock.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import dim from './dim'\n\n/**\n * Extract a block from a matrix \n * \n * @export\n * @param {Array} x\n * @param {Array} from from position\n * @param {Array} to to position\n * @returns {Array}\n * @example\n * \n * getBlock([[1,2,3],\n *           [3,4,5]], [0,0], [1,1])\n * // [[1, 2],\n *     [3, 4]]\n */\nexport default function getBlock(x, from, to) {\n  var s = dim(x);\n\n  function foo(x, k) {\n    var i, a = from[k],\n      n = to[k] - a,\n      ret = Array(n);\n    if (k === s.length - 1) {\n      for (i = n; i >= 0; i--) {\n        ret[i] = x[i + a];\n      }\n      return ret;\n    }\n    for (i = n; i >= 0; i--) {\n      ret[i] = foo(x[i + a], k + 1);\n    }\n    return ret;\n  }\n  return foo(x, 0);\n}"
  },
  {
    "__docId__": 162,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getBlock",
    "memberof": "src/getBlock.js",
    "longname": "src/getBlock.js~getBlock",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/getBlock.js",
    "importStyle": "getBlock",
    "description": "Extract a block from a matrix ",
    "examples": [
      "\ngetBlock([[1,2,3],\n          [3,4,5]], [0,0], [1,1])\n// [[1, 2],\n    [3, 4]]"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "from position"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "to position"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/getDiag.js",
    "memberof": null,
    "longname": "src/getDiag.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Complex from './Complex'\n\n/**\n * \tGet the diagonal of a matrix\n * \n * @export\n * @param {Array} A\n * @returns {Array}\n * @example \n * \n * getDiag([[1, 3], [0, 2]])\n * // [1, 2]\n */\nexport default function (A) {\n  switch (A.constructor.name) {\n    case 'Complex':\n      return cgetDiag(A);\n    case 'Sparse':\n      return sgetDiag(A);\n    default:\n      return getDiag(A);\n  }\n}\n\nfunction cgetDiag(A) {\n  // TODO: Check if is matrix\n    if (A.im) {\n      return new Complex(getDiag(A.re), getDiag(A.im));\n    }\n    return new Complex(getDiag(A.re));\n}\n\nfunction sgetDiag(A) {\n  throw new Error('mathlab.getDiag: getDiag for sparse matrix not exist')\n}\n\nfunction getDiag(A) {\n  var n = Math.min(A.length, A[0].length),i,ret = Array(n)\n  for (i = n - 1;i >= 1;--i) {\n    ret[i] = A[i][i]\n    --i\n    ret[i] = A[i][i]\n  }\n  if (i === 0) {\n    ret[0] = A[0][0]\n  }\n  return ret\n}\n"
  },
  {
    "__docId__": 164,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getDiag",
    "memberof": "src/getDiag.js",
    "longname": "src/getDiag.js~getDiag",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/getDiag.js",
    "importStyle": "getDiag",
    "description": "\tGet the diagonal of a matrix",
    "examples": [
      "\ngetDiag([[1, 3], [0, 2]])\n// [1, 2]"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cgetDiag",
    "memberof": "src/getDiag.js",
    "longname": "src/getDiag.js~cgetDiag",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/getDiag.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "A",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 166,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sgetDiag",
    "memberof": "src/getDiag.js",
    "longname": "src/getDiag.js~sgetDiag",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/getDiag.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "A",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getDiag",
    "memberof": "src/getDiag.js",
    "longname": "src/getDiag.js~getDiag",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/getDiag.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "A",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 168,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gt.js",
    "memberof": null,
    "longname": "src/gt.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst gt = pointwise((x, y) => x > y);\n\nfunction cgt(x, y) {\n  throw new Error('mathlab.gt: no gt for complex number')\n}\n\nfunction sgt(x, y) {\n  throw new Error('mathlab.gt: gt for sparse matrix not exist')\n}\n\n/**\n * Pointwise gt\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * gt(1, 2)\n * // returns 1 > 2\n * gt([1, 2], [2, 2])\n * // returns [1 > 2, 2 > 2]\n * gt([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 > 2, 1 > 2], [1 > 2, 2 > 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cgt(m1, m2);\n    case 'Sparse':\n      return sgt(m1, m2);\n    default:\n      return gt(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "gt",
    "memberof": "src/gt.js",
    "longname": "src/gt.js~gt",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/gt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cgt",
    "memberof": "src/gt.js",
    "longname": "src/gt.js~cgt",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/gt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 171,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sgt",
    "memberof": "src/gt.js",
    "longname": "src/gt.js~sgt",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/gt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 172,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "gt",
    "memberof": "src/gt.js",
    "longname": "src/gt.js~gt",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/gt.js",
    "importStyle": "gt",
    "description": "Pointwise gt",
    "examples": [
      "\ngt(1, 2)\n// returns 1 > 2\ngt([1, 2], [2, 2])\n// returns [1 > 2, 2 > 2]\ngt([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 > 2, 1 > 2], [1 > 2, 2 > 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/identity.js",
    "memberof": null,
    "longname": "src/identity.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import diag from './diag';\nimport rep from './rep';\n\n/**\n * Generate identity matrix of given size\n * \n * @param {Number} n\n * @returns {Array}\n * @example \n * \n * identity(2)\n * // [[1, 0], [0, 1]]\n */\nexport default function identity(n) {\n    return diag(rep([n], 1));\n}"
  },
  {
    "__docId__": 174,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "identity",
    "memberof": "src/identity.js",
    "longname": "src/identity.js~identity",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/identity.js",
    "importStyle": "identity",
    "description": "Generate identity matrix of given size",
    "examples": [
      "\nidentity(2)\n// [[1, 0], [0, 1]]"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/inv.js",
    "memberof": null,
    "longname": "src/inv.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import dim from './dim'\nimport identity from './identity'\nimport clone from './clone'\n\n/**\n * Inverse of an matrix\n * \n * @export\n * @param {Array} x\n * @returns {Array}\n * @example \n * \n * inv([[1,2],[3,4]])\n * // [[   -2,    1],\n * //  [  1.5, -0.5]]\n */\nexport default function inv (x) {\n  var s = dim(x), abs = Math.abs, m = s[0], n = s[1]\n  var A = clone(x), Ai, Aj\n  var I = identity(m), Ii, Ij\n  var i,j,k,x\n  for (j = 0;j < n;++j) {\n    var i0 = -1\n    var v0 = -1\n    for (i = j;i !== m;++i) { k = abs(A[i][j]); if (k > v0) { i0 = i; v0 = k; } }\n    Aj = A[i0]; A[i0] = A[j]; A[j] = Aj\n    Ij = I[i0]; I[i0] = I[j]; I[j] = Ij\n    x = Aj[j]\n    for (k = j;k !== n;++k)    Aj[k] /= x\n    for (k = n - 1;k !== -1;--k) Ij[k] /= x\n    for (i = m - 1;i !== -1;--i) {\n      if (i !== j) {\n        Ai = A[i]\n        Ii = I[i]\n        x = Ai[j]\n        for (k = j + 1;k !== n;++k)  Ai[k] -= Aj[k] * x\n        for (k = n - 1;k > 0;--k) { Ii[k] -= Ij[k] * x; --k; Ii[k] -= Ij[k] * x; }\n        if (k === 0) Ii[0] -= Ij[0] * x\n      }\n    }\n  }\n  return I\n}\n"
  },
  {
    "__docId__": 176,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "inv",
    "memberof": "src/inv.js",
    "longname": "src/inv.js~inv",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/inv.js",
    "importStyle": "inv",
    "description": "Inverse of an matrix",
    "examples": [
      "\ninv([[1,2],[3,4]])\n// [[   -2,    1],\n//  [  1.5, -0.5]]"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/leq.js",
    "memberof": null,
    "longname": "src/leq.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst leq = pointwise((x, y) => x <= y);\n\nfunction cleq(x, y) {\n  throw new Error('mathlab.leq: no leq for complex number')\n}\n\nfunction sleq(x, y) {\n  throw new Error('mathlab.leq: leq for sparse matrix not exist')\n}\n\n/**\n * Pointwise leq\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * leq(1, 2)\n * // returns 1 <= 2\n * leq([1, 2], [2, 2])\n * // returns [1 <= 2, 2 <= 2]\n * leq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 <= 2, 1 <= 2], [1 <= 2, 2 <= 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cleq(m1, m2);\n    case 'Sparse':\n      return sleq(m1, m2);\n    default:\n      return leq(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "leq",
    "memberof": "src/leq.js",
    "longname": "src/leq.js~leq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/leq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cleq",
    "memberof": "src/leq.js",
    "longname": "src/leq.js~cleq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/leq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 180,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sleq",
    "memberof": "src/leq.js",
    "longname": "src/leq.js~sleq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/leq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 181,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "leq",
    "memberof": "src/leq.js",
    "longname": "src/leq.js~leq",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/leq.js",
    "importStyle": "leq",
    "description": "Pointwise leq",
    "examples": [
      "\nleq(1, 2)\n// returns 1 <= 2\nleq([1, 2], [2, 2])\n// returns [1 <= 2, 2 <= 2]\nleq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 <= 2, 1 <= 2], [1 <= 2, 2 <= 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 182,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/linspace.js",
    "memberof": null,
    "longname": "src/linspace.js",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "content": "/**\n * Generate evenly spaced values\n * \n * @export\n * @param {Number} a\n * @param {Number} b\n * @param {Number} n\n * @returns {Array}\n * @example \n * \n * linspace(1, 2, 3)\n * // [1, 1.5, 2]\n */\nexport default function linspace (a, b, n) {\n  if (typeof n === 'undefined') n = Math.max(Math.round(b - a) + 1, 1)\n  if (n < 2) {\n    return n === 1 ? [a] : []\n  }\n  var i,ret = Array(n)\n  n--\n  for (i = n;i >= 0;i--) {\n    ret[i] = (i * b + (n - i) * a) / n\n  }\n  return ret\n}\n"
  },
  {
    "__docId__": 183,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "linspace",
    "memberof": "src/linspace.js",
    "longname": "src/linspace.js~linspace",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/linspace.js",
    "importStyle": "linspace",
    "description": "Generate evenly spaced values",
    "examples": [
      "\nlinspace(1, 2, 3)\n// [1, 1.5, 2]"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 184,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/log.js",
    "memberof": null,
    "longname": "src/log.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Sparse from './Sparse'\nimport Complex from './Complex'\nimport atan2 from './atan2'\nimport abs from './abs'\n\nconst log = pointwise(Math.log)\n\nfunction clog(x) {\n  if (x.im) {\n    var theta = new Complex(atan2(x.im, x.re)),\n      r = abs(x);\n    return new Complex(log(r.re), theta.re);\n  }\n  return new Complex(log(x.re));\n}\n\nfunction slog(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: log(x.val),\n  })\n}\n\n/**\n * Pointwise Math.log(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * log(1)\n * // returns Math.log(1)\n * log([1, 2])\n * // returns [Math.log(1), Math.log(2)]\n * log([[1,2],[1,3]])\n * // returns [ [Math.log(1), Math.log(2)], [Math.log(1), Math.log(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return clog(m);\n    case 'Sparse':\n      return slog(m);\n    default:\n      return log(m);\n  }\n}\n"
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "log",
    "memberof": "src/log.js",
    "longname": "src/log.js~log",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "clog",
    "memberof": "src/log.js",
    "longname": "src/log.js~clog",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 187,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "slog",
    "memberof": "src/log.js",
    "longname": "src/log.js~slog",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "log",
    "memberof": "src/log.js",
    "longname": "src/log.js~log",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/log.js",
    "importStyle": "log",
    "description": "Pointwise Math.log(x)",
    "examples": [
      "\nlog(1)\n// returns Math.log(1)\nlog([1, 2])\n// returns [Math.log(1), Math.log(2)]\nlog([[1,2],[1,3]])\n// returns [ [Math.log(1), Math.log(2)], [Math.log(1), Math.log(3)] ]"
    ],
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 189,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/lshift.js",
    "memberof": null,
    "longname": "src/lshift.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst lshift = pointwise((x, y) => x << y);\n\nfunction clshift(x, y) {\n  throw new Error('mathlab.lshift: no lshift for complex number')\n}\n\nfunction slshift(x, y) {\n  throw new Error('mathlab.lshift: lshift for sparse matrix not exist')\n}\n\n/**\n * Pointwise lshift\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * lshift(1, 2)\n * // returns 1 << 2\n * lshift([1, 2], [2, 2])\n * // returns [1 << 2, 2 << 2]\n * lshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 << 2, 1 << 2], [1 << 2, 2 << 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return clshift(m1, m2);\n    case 'Sparse':\n      return slshift(m1, m2);\n    default:\n      return lshift(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lshift",
    "memberof": "src/lshift.js",
    "longname": "src/lshift.js~lshift",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/lshift.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "clshift",
    "memberof": "src/lshift.js",
    "longname": "src/lshift.js~clshift",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/lshift.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 192,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "slshift",
    "memberof": "src/lshift.js",
    "longname": "src/lshift.js~slshift",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/lshift.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 193,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lshift",
    "memberof": "src/lshift.js",
    "longname": "src/lshift.js~lshift",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/lshift.js",
    "importStyle": "lshift",
    "description": "Pointwise lshift",
    "examples": [
      "\nlshift(1, 2)\n// returns 1 << 2\nlshift([1, 2], [2, 2])\n// returns [1 << 2, 2 << 2]\nlshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 << 2, 1 << 2], [1 << 2, 2 << 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/lt.js",
    "memberof": null,
    "longname": "src/lt.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst lt = pointwise((x, y) => x < y);\n\nfunction clt(x, y) {\n  throw new Error('mathlab.lt: no lt for complex number')\n}\n\nfunction slt(x, y) {\n  throw new Error('mathlab.lt: lt for sparse matrix not exist')\n}\n\n/**\n * Pointwise lt\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * lt(1, 2)\n * // returns 1 < 2\n * lt([1, 2], [2, 2])\n * // returns [1 < 2, 2 < 2]\n * lt([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 < 2, 1 < 2], [1 < 2, 2 < 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return clt(m1, m2);\n    case 'Sparse':\n      return slt(m1, m2);\n    default:\n      return lt(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lt",
    "memberof": "src/lt.js",
    "longname": "src/lt.js~lt",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/lt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "clt",
    "memberof": "src/lt.js",
    "longname": "src/lt.js~clt",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/lt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 197,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "slt",
    "memberof": "src/lt.js",
    "longname": "src/lt.js~slt",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/lt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 198,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lt",
    "memberof": "src/lt.js",
    "longname": "src/lt.js~lt",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/lt.js",
    "importStyle": "lt",
    "description": "Pointwise lt",
    "examples": [
      "\nlt(1, 2)\n// returns 1 < 2\nlt([1, 2], [2, 2])\n// returns [1 < 2, 2 < 2]\nlt([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 < 2, 1 < 2], [1 < 2, 2 < 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 199,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/mod.js",
    "memberof": null,
    "longname": "src/mod.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst mod = pointwise((x, y) => x % y);\n\nfunction cmod(x, y) {\n  throw new Error('mathlab.mod: no mod for complex number')\n}\n\nfunction smod(x, y) {\n  throw new Error('mathlab.mod: mod for sparse matrix not exist')\n}\n\n/**\n * Pointwise mod\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * mod(1, 2)\n * // returns 1 % 2\n * mod([1, 2], [2, 2])\n * // returns [1 % 2, 2 % 2]\n * mod([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 % 2, 1 % 2], [1 % 2, 2 % 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cmod(m1, m2);\n    case 'Sparse':\n      return smod(m1, m2);\n    default:\n      return mod(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 200,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mod",
    "memberof": "src/mod.js",
    "longname": "src/mod.js~mod",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/mod.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cmod",
    "memberof": "src/mod.js",
    "longname": "src/mod.js~cmod",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/mod.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 202,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "smod",
    "memberof": "src/mod.js",
    "longname": "src/mod.js~smod",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/mod.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 203,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mod",
    "memberof": "src/mod.js",
    "longname": "src/mod.js~mod",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/mod.js",
    "importStyle": "mod",
    "description": "Pointwise mod",
    "examples": [
      "\nmod(1, 2)\n// returns 1 % 2\nmod([1, 2], [2, 2])\n// returns [1 % 2, 2 % 2]\nmod([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 % 2, 1 % 2], [1 % 2, 2 % 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 204,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/mul.js",
    "memberof": null,
    "longname": "src/mul.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise';\nimport Complex from './Complex';\nimport add from './add';\nimport sub from './sub';\n\n// array mul\nconst amul = pointwise((x, y) => x * y)\n\n// complex array mul\nfunction cmul(x, y) {\n  if(!(y instanceof Complex)) { y = new Complex(y); }\n  if (x.im) {\n    if (y.im) {\n      return new Complex(sub(amul(x.re, y.re), amul(x.im, y.im)), add(amul(x.re, y.im), amul(x.im, y.re)));\n    }\n    return new Complex(amul(x.re, y.re), amul(x.im, y.re));\n  }\n  if (y.im) {\n    return new Complex(amul(x.re, y.re), amul(x.re, y.im));\n  }\n  return new Complex(amul(x.re, y.re));\n}\n\nfunction smul(x, y) {\n  throw new Error('mathlab.sub: sub for sparse matrix not exist')\n}\n\n/**\n * Pointwise mul\n * \n * @export\n * @param {Number|Array|Object} m1\n * @param {Number|Array|Object} m2\n * @returns {Number|Array}\n * @example \n * \n * mul(1, 2)\n * // returns 1 * 2\n * mul([1, 2], [2, 2])\n * // returns [1 * 2, 2 * 2]\n * mul([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 * 2, 1 * 2], [1 * 2, 2 * 2] ]\n */\nexport default function (m1, m2) {\n  // if (m1.constructor.name !== m2.constructor.name) {\n  //   throw new Error('mathlab.mul: argument type mismatch')\n  // }\n\n  switch (m1.constructor.name) {\n    case 'Array':\n      return amul(m1, m2);\n    case 'Complex':\n      return cmul(m1, m2);\n    case 'Sparse':\n      return smul(m1, m2);\n    default:\n      return amul(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "amul",
    "memberof": "src/mul.js",
    "longname": "src/mul.js~amul",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/mul.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cmul",
    "memberof": "src/mul.js",
    "longname": "src/mul.js~cmul",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/mul.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 207,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "smul",
    "memberof": "src/mul.js",
    "longname": "src/mul.js~smul",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/mul.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 208,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mul",
    "memberof": "src/mul.js",
    "longname": "src/mul.js~mul",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/mul.js",
    "importStyle": "mul",
    "description": "Pointwise mul",
    "examples": [
      "\nmul(1, 2)\n// returns 1 * 2\nmul([1, 2], [2, 2])\n// returns [1 * 2, 2 * 2]\nmul([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 * 2, 1 * 2], [1 * 2, 2 * 2] ]"
    ],
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 209,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/neg.js",
    "memberof": null,
    "longname": "src/neg.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Complex from './Complex'\nimport Sparse from './Sparse'\n\nconst neg = pointwise(x=> -x);\n\nfunction cneg(x) {\n  if (x.im) {\n    return new Complex(neg(x.re), neg(x.im));\n  }\n  return new Complex(neg(x.re));\n}\n\nfunction sneg(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: neg(x.val),\n  })\n}\n\n/**\n * Pointwise Math.neg(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * neg(1)\n * // returns Math.neg(1)\n * neg([1, 2])\n * // returns [Math.neg(1), Math.neg(2)]\n * neg([[1,2],[1,3]])\n * // returns [ [Math.neg(1), Math.neg(2)], [Math.neg(1), Math.neg(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cneg(m);\n    case 'Sparse':\n      return sneg(m);\n    default:\n      return neg(m);\n  }\n}\n"
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "neg",
    "memberof": "src/neg.js",
    "longname": "src/neg.js~neg",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/neg.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cneg",
    "memberof": "src/neg.js",
    "longname": "src/neg.js~cneg",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/neg.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 212,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sneg",
    "memberof": "src/neg.js",
    "longname": "src/neg.js~sneg",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/neg.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 213,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "neg",
    "memberof": "src/neg.js",
    "longname": "src/neg.js~neg",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/neg.js",
    "importStyle": "neg",
    "description": "Pointwise Math.neg(x)",
    "examples": [
      "\nneg(1)\n// returns Math.neg(1)\nneg([1, 2])\n// returns [Math.neg(1), Math.neg(2)]\nneg([[1,2],[1,3]])\n// returns [ [Math.neg(1), Math.neg(2)], [Math.neg(1), Math.neg(3)] ]"
    ],
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/negtranspose.js",
    "memberof": null,
    "longname": "src/negtranspose.js",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "content": "/**\n * neg transpose\n * \n * @export\n * @param {any} x\n * @returns\n */\nexport default function negtranspose(x) {\n    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;\n    for(j=0;j<n;j++) ret[j] = Array(m);\n    for(i=m-1;i>=1;i-=2) {\n        A1 = x[i];\n        A0 = x[i-1];\n        for(j=n-1;j>=1;--j) {\n            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];\n            --j;\n            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];\n        }\n        if(j===0) {\n            Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];\n        }\n    }\n    if(i===0) {\n        A0 = x[0];\n        for(j=n-1;j>=1;--j) {\n            ret[j][0] = -A0[j];\n            --j;\n            ret[j][0] = -A0[j];\n        }\n        if(j===0) { ret[0][0] = -A0[0]; }\n    }\n    return ret;\n}"
  },
  {
    "__docId__": 215,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "negtranspose",
    "memberof": "src/negtranspose.js",
    "longname": "src/negtranspose.js~negtranspose",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/negtranspose.js",
    "importStyle": "negtranspose",
    "description": "neg transpose",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 216,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/neq.js",
    "memberof": null,
    "longname": "src/neq.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst neq = pointwise((x, y) => x !== y);\n\nfunction cneq(x, y) {\n  throw new Error('mathlab.neq: no neq for complex number')\n}\n\nfunction sneq(x, y) {\n  throw new Error('mathlab.neq: neq for sparse matrix not exist')\n}\n\n/**\n * Pointwise neq\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * neq(1, 2)\n * // returns 1 !== 2\n * neq([1, 2], [2, 2])\n * // returns [1 !== 2, 2 !== 2]\n * neq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 !== 2, 1 !== 2], [1 !== 2, 2 !== 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cneq(m1, m2);\n    case 'Sparse':\n      return sneq(m1, m2);\n    default:\n      return neq(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "neq",
    "memberof": "src/neq.js",
    "longname": "src/neq.js~neq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/neq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cneq",
    "memberof": "src/neq.js",
    "longname": "src/neq.js~cneq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/neq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 219,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sneq",
    "memberof": "src/neq.js",
    "longname": "src/neq.js~sneq",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/neq.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 220,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "neq",
    "memberof": "src/neq.js",
    "longname": "src/neq.js~neq",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/neq.js",
    "importStyle": "neq",
    "description": "Pointwise neq",
    "examples": [
      "\nneq(1, 2)\n// returns 1 !== 2\nneq([1, 2], [2, 2])\n// returns [1 !== 2, 2 !== 2]\nneq([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 !== 2, 1 !== 2], [1 !== 2, 2 !== 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 221,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/norm2.js",
    "memberof": null,
    "longname": "src/norm2.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import norm2Squared from './norm2Squared';\n\n\n/**\n * Square root of the sum of the squares of the entries of x\n * \n * @export\n * @param {Array|Number} x\n * @returns {Number}\n * @example\n * \n * norm2(2)\n * // 2\n * norm2([2,2])\n * // 2.828\n */\nexport default function (x, y) {\n  switch (x.constructor.name) {\n    case 'Complex':\n      return cnorm2(x, y);\n    case 'Sparse':\n      return snorm2(x, y);\n    default:\n      return norm2(x, y);\n  }\n}\n\nfunction cnorm2(x, y) {\n\tif (x.im) {\n\t\tvar f = norm2Squared;\n\t\treturn Math.sqrt(f(x.re) + f(x.im));\n\t}\n\treturn norm2(x.re);\n}\n\nfunction snorm2(x, y) {\n  throw new Error('mathlab.norm2: norm2 for sparse matrix not exist')\n}\n\nfunction norm2(x) {\n  return Math.sqrt(norm2Squared(x)); \n}"
  },
  {
    "__docId__": 222,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "norm2",
    "memberof": "src/norm2.js",
    "longname": "src/norm2.js~norm2",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/norm2.js",
    "importStyle": "norm2",
    "description": "Square root of the sum of the squares of the entries of x",
    "examples": [
      "\nnorm2(2)\n// 2\nnorm2([2,2])\n// 2.828"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 223,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cnorm2",
    "memberof": "src/norm2.js",
    "longname": "src/norm2.js~cnorm2",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/norm2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 224,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "snorm2",
    "memberof": "src/norm2.js",
    "longname": "src/norm2.js~snorm2",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/norm2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 225,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "norm2",
    "memberof": "src/norm2.js",
    "longname": "src/norm2.js~norm2",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/norm2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 226,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/norm2Squared.js",
    "memberof": null,
    "longname": "src/norm2Squared.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import dim from './dim';\n\n/**\n * Sum of the squares of the entries of x\n * \n * @export\n * @param {Array|Number} x\n * @returns {Number}\n * @example\n * \n * norm2Squared(2)\n * // 4\n * norm2Squared([2,2])\n * // 8\n */\nexport default function nrom2Squared(x, s, k) {\n  var accum = 0;\n  if (typeof x !== \"object\") {\n    xi = x;\n    accum += xi * xi;;\n    return accum;\n  }\n  if (typeof s === \"undefined\") s = dim(x);\n  if (typeof k === \"undefined\") k = 0;\n  if (k === s.length - 1) return norm2SquaredV(x);\n  var xi;\n  var n = x.length,\n    i;\n  for (i = n - 1; i !== -1; --i) {\n    xi = nrom2Squared(x[i]);\n    accum += xi * xi;;\n  }\n  return accum;\n}\n\nfunction norm2SquaredV(x) {\n  var n = x.length;\n  var i, xi;\n  var accum = 0;;\n  for (i = n - 1; i !== -1; --i) {\n    xi = x[i];\n    accum += xi * xi;\n  }\n  return accum;\n}"
  },
  {
    "__docId__": 227,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "nrom2Squared",
    "memberof": "src/norm2Squared.js",
    "longname": "src/norm2Squared.js~nrom2Squared",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/norm2Squared.js",
    "importStyle": "nrom2Squared",
    "description": "Sum of the squares of the entries of x",
    "examples": [
      "\nnorm2Squared(2)\n// 4\nnorm2Squared([2,2])\n// 8"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 228,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "norm2SquaredV",
    "memberof": "src/norm2Squared.js",
    "longname": "src/norm2Squared.js~norm2SquaredV",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/norm2Squared.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 229,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/not.js",
    "memberof": null,
    "longname": "src/not.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Sparse from './Sparse'\n\nconst not = pointwise(x=> !x);\n\nfunction cnot(x) {\n  throw new Error('mathlab.not: no not for complex number')\n}\n\nfunction snot(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: not(x.val),\n  })\n}\n\n/**\n * Pointwise Math.not(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * not(1)\n * // returns Math.not(1)\n * not([1, 2])\n * // returns [Math.not(1), Math.not(2)]\n * not([[1,2],[1,3]])\n * // returns [ [Math.not(1), Math.not(2)], [Math.not(1), Math.not(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cnot(m);\n    case 'Sparse':\n      return snot(m);\n    default:\n      return not(m);\n  }\n}\n"
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "not",
    "memberof": "src/not.js",
    "longname": "src/not.js~not",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/not.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cnot",
    "memberof": "src/not.js",
    "longname": "src/not.js~cnot",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/not.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 232,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "snot",
    "memberof": "src/not.js",
    "longname": "src/not.js~snot",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/not.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 233,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "not",
    "memberof": "src/not.js",
    "longname": "src/not.js~not",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/not.js",
    "importStyle": "not",
    "description": "Pointwise Math.not(x)",
    "examples": [
      "\nnot(1)\n// returns Math.not(1)\nnot([1, 2])\n// returns [Math.not(1), Math.not(2)]\nnot([[1,2],[1,3]])\n// returns [ [Math.not(1), Math.not(2)], [Math.not(1), Math.not(3)] ]"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 234,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/or.js",
    "memberof": null,
    "longname": "src/or.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst or = pointwise((x, y) => x || y);\n\nfunction cor(x, y) {\n  throw new Error('mathlab.or: no or for complex number')\n}\n\nfunction sor(x, y) {\n  throw new Error('mathlab.or: or for sparse matrix not exist')\n}\n\n/**\n * Pointwise or\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * or(1, 2)\n * // returns 1 || 2\n * or([1, 2], [2, 2])\n * // returns [1 || 2, 2 || 2]\n * or([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 || 2, 1 || 2], [1 || 2, 2 || 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return cor(m1, m2);\n    case 'Sparse':\n      return sor(m1, m2);\n    default:\n      return or(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 235,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "or",
    "memberof": "src/or.js",
    "longname": "src/or.js~or",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/or.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cor",
    "memberof": "src/or.js",
    "longname": "src/or.js~cor",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/or.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 237,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sor",
    "memberof": "src/or.js",
    "longname": "src/or.js~sor",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/or.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 238,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "or",
    "memberof": "src/or.js",
    "longname": "src/or.js~or",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/or.js",
    "importStyle": "or",
    "description": "Pointwise or",
    "examples": [
      "\nor(1, 2)\n// returns 1 || 2\nor([1, 2], [2, 2])\n// returns [1 || 2, 2 || 2]\nor([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 || 2, 1 || 2], [1 || 2, 2 || 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 239,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/pointwise.js",
    "memberof": null,
    "longname": "src/pointwise.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import dim from './dim'\n\n/**\n * Create a pointwise function\n * \n * @export\n * @param {Function} fun\n * @returns {Function}\n * @example \n * \n * function _inc (x) {\n *   return x + 1\n * }\n * const inc = pointwise(inc)\n * inc(1)                                  // 2\n * inc([1, 2])                             // [2, 3]\n * inc([[1, 2], [1, 3]])                   // [[2, 3], [2, 4]]\n * \n * \n * function _add (x, y) {\n *   return x + y\n * }\n * const add = pointwise(_add)\n * add(1, 2)                                // 3\n * add([1, 2], [1, 2])                      // [2, 4]\n * add([[1, 2], [1, 2]], [[1, 2], [1, 2]])  //[[2, 4], [2, 4]]\n */\nexport default function pointwise(fun) {\n  return function(...args) {\n    if (args.length === 0) {\n      throw new Error('mathlab.pointwise: must provide arguments')\n    } else if (args.length === 1) {\n      const [m] = args\n      switch (dim(m).length) {\n        case 0:\n          return fun(m)\n        case 1:\n          return m.map(fun)\n        case 2:\n          return m.map(a => a.map(fun))\n        default:\n          throw new Error('mathlab.pointwise: dimension of matrix should <= 2')\n      }\n    } else if (args.length === 2) {\n      const [m1, m2] = args\n      // if (dim(m1)[0] !== dim(m2)[0] || dim(m1)[1] !== dim(m2)[1]) {\n      //   throw new Error('mathlab: size of two matrices should be the same')\n      // }\n      switch (dim(m1).length) {\n        case 0:\n          return fun(m1, m2)\n        case 1:\n          {\n            if (typeof m2 === 'number') {\n              return m1.map(x => fun(x, m2))\n            }\n            return m1.map((x, i) => fun(x, m2[i]))\n          }\n        case 2:\n          {\n            if (typeof m2 === 'number') {\n              return m1.map(mm1 => mm1.map(x => fun(x, m2)))\n            }\n            return m1.map((mm1, i) => mm1.map((x, j) => fun(x, m2[i][j])))\n          }\n\n        default:\n          throw new Error('mathlab.pointwise: dimension of matrix should <= 2')\n      }\n    }\n  }\n}"
  },
  {
    "__docId__": 240,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "pointwise",
    "memberof": "src/pointwise.js",
    "longname": "src/pointwise.js~pointwise",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/pointwise.js",
    "importStyle": "pointwise",
    "description": "Create a pointwise function",
    "examples": [
      "\nfunction _inc (x) {\n  return x + 1\n}\nconst inc = pointwise(inc)\ninc(1)                                  // 2\ninc([1, 2])                             // [2, 3]\ninc([[1, 2], [1, 3]])                   // [[2, 3], [2, 4]]\n\n\nfunction _add (x, y) {\n  return x + y\n}\nconst add = pointwise(_add)\nadd(1, 2)                                // 3\nadd([1, 2], [1, 2])                      // [2, 4]\nadd([[1, 2], [1, 2]], [[1, 2], [1, 2]])  //[[2, 4], [2, 4]]"
    ],
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fun",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 241,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/pointwise2.js",
    "memberof": null,
    "longname": "src/pointwise2.js",
    "access": null,
    "description": null,
    "lineNumber": 0,
    "content": ""
  },
  {
    "__docId__": 242,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/pow.js",
    "memberof": null,
    "longname": "src/pow.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\n/**\n * Pointwise Math.pow(x, y)\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * pow(1, 2)\n * // returns Math.pow(1, 2)\n * pow([1, 2], [2, 2])\n * // returns [Math.pow(1, 2), Math.pow(2, 2)]\n * pow([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [Math.pow(2, 2), Math.pow(1, 2)], [Math.pow(1, 2), Math.pow(2, 2)] ]\n */\nexport default function (m1, m2) { \n  return pointwise(Math.pow)(m1, m2)\n}\n"
  },
  {
    "__docId__": 243,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "pow",
    "memberof": "src/pow.js",
    "longname": "src/pow.js~pow",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/pow.js",
    "importStyle": "pow",
    "description": "Pointwise Math.pow(x, y)",
    "examples": [
      "\npow(1, 2)\n// returns Math.pow(1, 2)\npow([1, 2], [2, 2])\n// returns [Math.pow(1, 2), Math.pow(2, 2)]\npow([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [Math.pow(2, 2), Math.pow(1, 2)], [Math.pow(1, 2), Math.pow(2, 2)] ]"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 244,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/random.js",
    "memberof": null,
    "longname": "src/random.js",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "content": "\n/**\n * Create an Array of random numbers \n * \n * @export\n * @param {Array} size of the random matrix\n * @returns {Array} array of random numbers\n * @example\n * \n * random([2, 3])\n * // [[0.05303,0.1537,0.7280],\n *     [0.3839,0.08818,0.6316]]\n */\nexport default function random(s) { \n    return _random(s,0);\n}\n\nfunction _random(s,k) {\n    var i,n=s[k],ret=Array(n), rnd;\n    if(k === s.length-1) {\n        rnd = Math.random;\n        for(i=n-1;i>=1;i-=2) {\n            ret[i] = rnd();\n            ret[i-1] = rnd();\n        }\n        if(i===0) { ret[0] = rnd(); }\n        return ret;\n    }\n    for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);\n    return ret;\n}"
  },
  {
    "__docId__": 245,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "random",
    "memberof": "src/random.js",
    "longname": "src/random.js~random",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/random.js",
    "importStyle": "random",
    "description": "Create an Array of random numbers ",
    "examples": [
      "\nrandom([2, 3])\n// [[0.05303,0.1537,0.7280],\n    [0.3839,0.08818,0.6316]]"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} array of random numbers"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "of the random matrix"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array of random numbers"
    },
    "generator": false
  },
  {
    "__docId__": 246,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_random",
    "memberof": "src/random.js",
    "longname": "src/random.js~_random",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/random.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "k",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 247,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/reciprocal.js",
    "memberof": null,
    "longname": "src/reciprocal.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export function reciprocal() {\n    var mul = numeric.mul, div = numeric.div;\n    if(this.im) {\n        var d = numeric.add(mul(this.re,this.re),mul(this.im,this.im));\n        return new numeric.Complex(div(this.re,d),div(numeric.neg(this.im),d));\n    }\n    return new Complex(div(1,this.re));\n}"
  },
  {
    "__docId__": 248,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "reciprocal",
    "memberof": "src/reciprocal.js",
    "longname": "src/reciprocal.js~reciprocal",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/reciprocal.js",
    "importStyle": "{reciprocal}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 249,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/rep.js",
    "memberof": null,
    "longname": "src/rep.js",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "content": "/**\n * Create an Array by duplicating values \n * \n * @param {Array} s size of the Matrix\n * @param {Array} v value\n * @returns {Array}\n * @example\n * \n * rep([2,3], 0)\n * // [[0,0,0],\n *     [0,0,0]] \n * \n * rep([3], 5)\n * // [5,5,5]\n */\nexport default function rep(s,v,k) {\n    if(typeof k === \"undefined\") { k=0; }\n    var n = s[k], ret = Array(n), i;\n    if(k === s.length-1) {\n        for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }\n        if(i===-1) { ret[0] = v; }\n        return ret;\n    }\n    for(i=n-1;i>=0;i--) { ret[i] = rep(s,v,k+1); }\n    return ret;\n}"
  },
  {
    "__docId__": 250,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "rep",
    "memberof": "src/rep.js",
    "longname": "src/rep.js~rep",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/rep.js",
    "importStyle": "rep",
    "description": "Create an Array by duplicating values ",
    "examples": [
      "\nrep([2,3], 0)\n// [[0,0,0],\n    [0,0,0]] \n\nrep([3], 5)\n// [5,5,5]"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "size of the Matrix"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 251,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/round.js",
    "memberof": null,
    "longname": "src/round.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\n\nconst round = pointwise(Math.round)\n\nfunction cround(x) {\n  throw new Error('mathlab.round: no round for complex number')\n}\n\nfunction sround(x) {\n  throw new Error('mathlab.round: round for sparse matrix not exist')\n}\n\n/**\n * Pointwise Math.round(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * round(1)\n * // returns Math.round(1)\n * round([1, 2])\n * // returns [Math.round(1), Math.round(2)]\n * round([[1,2],[1,3]])\n * // returns [ [Math.round(1), Math.round(2)], [Math.round(1), Math.round(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return cround(m);\n    case 'Sparse':\n      return sround(m);\n    default:\n      return round(m);\n  }\n}\n"
  },
  {
    "__docId__": 252,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "round",
    "memberof": "src/round.js",
    "longname": "src/round.js~round",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/round.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cround",
    "memberof": "src/round.js",
    "longname": "src/round.js~cround",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/round.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 254,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sround",
    "memberof": "src/round.js",
    "longname": "src/round.js~sround",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/round.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 255,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "round",
    "memberof": "src/round.js",
    "longname": "src/round.js~round",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/round.js",
    "importStyle": "round",
    "description": "Pointwise Math.round(x)",
    "examples": [
      "\nround(1)\n// returns Math.round(1)\nround([1, 2])\n// returns [Math.round(1), Math.round(2)]\nround([[1,2],[1,3]])\n// returns [ [Math.round(1), Math.round(2)], [Math.round(1), Math.round(3)] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 256,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/rrshift.js",
    "memberof": null,
    "longname": "src/rrshift.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst rrshift = pointwise((x, y) => x >>> y);\n\nfunction crrshift(x, y) {\n  throw new Error('mathlab.rrshift: no rrshift for complex number')\n}\n\nfunction srrshift(x, y) {\n  throw new Error('mathlab.rrshift: rrshift for sparse matrix not exist')\n}\n\n/**\n * Pointwise rrshift\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * rrshift(1, 2)\n * // returns 1 >>> 2\n * rrshift([1, 2], [2, 2])\n * // returns [1 >>> 2, 2 >>> 2]\n * rrshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 >>> 2, 1 >>> 2], [1 >>> 2, 2 >>> 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return crrshift(m1, m2);\n    case 'Sparse':\n      return srrshift(m1, m2);\n    default:\n      return rrshift(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "rrshift",
    "memberof": "src/rrshift.js",
    "longname": "src/rrshift.js~rrshift",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/rrshift.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "crrshift",
    "memberof": "src/rrshift.js",
    "longname": "src/rrshift.js~crrshift",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/rrshift.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 259,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "srrshift",
    "memberof": "src/rrshift.js",
    "longname": "src/rrshift.js~srrshift",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/rrshift.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 260,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "rrshift",
    "memberof": "src/rrshift.js",
    "longname": "src/rrshift.js~rrshift",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/rrshift.js",
    "importStyle": "rrshift",
    "description": "Pointwise rrshift",
    "examples": [
      "\nrrshift(1, 2)\n// returns 1 >>> 2\nrrshift([1, 2], [2, 2])\n// returns [1 >>> 2, 2 >>> 2]\nrrshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 >>> 2, 1 >>> 2], [1 >>> 2, 2 >>> 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 261,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/rshift.js",
    "memberof": null,
    "longname": "src/rshift.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\n\nconst rshift = pointwise((x, y) => x >> y);\n\nfunction crshift(x, y) {\n  throw new Error('mathlab.rshift: no rshift for complex number')\n}\n\nfunction srshift(x, y) {\n  throw new Error('mathlab.rshift: rshift for sparse matrix not exist')\n}\n\n/**\n * Pointwise rshift\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * rshift(1, 2)\n * // returns 1 >> 2\n * rshift([1, 2], [2, 2])\n * // returns [1 >> 2, 2 >> 2]\n * rshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 >> 2, 1 >> 2], [1 >> 2, 2 >> 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return crshift(m1, m2);\n    case 'Sparse':\n      return srshift(m1, m2);\n    default:\n      return rshift(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 262,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "rshift",
    "memberof": "src/rshift.js",
    "longname": "src/rshift.js~rshift",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/rshift.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "crshift",
    "memberof": "src/rshift.js",
    "longname": "src/rshift.js~crshift",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/rshift.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 264,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "srshift",
    "memberof": "src/rshift.js",
    "longname": "src/rshift.js~srshift",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/rshift.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 265,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "rshift",
    "memberof": "src/rshift.js",
    "longname": "src/rshift.js~rshift",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/rshift.js",
    "importStyle": "rshift",
    "description": "Pointwise rshift",
    "examples": [
      "\nrshift(1, 2)\n// returns 1 >> 2\nrshift([1, 2], [2, 2])\n// returns [1 >> 2, 2 >> 2]\nrshift([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 >> 2, 1 >> 2], [1 >> 2, 2 >> 2] ]"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 266,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/same.js",
    "memberof": null,
    "longname": "src/same.js",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "content": "/**\n * \tx and y are entrywise identical \n * \n * @export\n * @param {Array} x\n * @param {Array} y\n * @returns {Boolean}\n * @example\n * \n * same([1,2], [1,2,3]) // false\n * same([1, 2], [1, 2]) // true\n */\nexport default function same(x,y) {\n    var i,n;\n    if(!(x instanceof Array) || !(y instanceof Array)) { return false; }\n    n = x.length;\n    if(n !== y.length) { return false; }\n    for(i=0;i<n;i++) {\n        if(x[i] === y[i]) { continue; }\n        if(typeof x[i] === \"object\") { if(!same(x[i],y[i])) return false; }\n        else { return false; }\n    }\n    return true;\n}"
  },
  {
    "__docId__": 267,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "same",
    "memberof": "src/same.js",
    "longname": "src/same.js~same",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/same.js",
    "importStyle": "same",
    "description": "\tx and y are entrywise identical ",
    "examples": [
      "\nsame([1,2], [1,2,3]) // false\nsame([1, 2], [1, 2]) // true"
    ],
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 268,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/setBlock.js",
    "memberof": null,
    "longname": "src/setBlock.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import dim from './dim'\n\n/**\n * Set a block of a matrix \n * \n * @param {Array} x\n * @param {Array} from\n * @param {Array} to\n * @param {Array} B\n * @returns {Array}\n * @example\n * \n * setBlock([[1,2,3], [3,4,5]], [0,0], [1,1],[[2,2],[2,2]])\n * // [[2,2,3],[2,2,5]]\n */\nexport default function setBlock(x,from,to,B) {\n    var s = dim(x);\n    function foo(x,y,k) {\n        var i,a = from[k], n = to[k]-a;\n        if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }\n        for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }\n    }\n    foo(x,B,0);\n    return x;\n}"
  },
  {
    "__docId__": 269,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setBlock",
    "memberof": "src/setBlock.js",
    "longname": "src/setBlock.js~setBlock",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/setBlock.js",
    "importStyle": "setBlock",
    "description": "Set a block of a matrix ",
    "examples": [
      "\nsetBlock([[1,2,3], [3,4,5]], [0,0], [1,1],[[2,2],[2,2]])\n// [[2,2,3],[2,2,5]]"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "B",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 270,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sin.js",
    "memberof": null,
    "longname": "src/sin.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Complex from './Complex'\nimport Sparse from './Sparse'\nimport neg from './neg'\nimport exp from './exp'\nimport div from './div'\nimport sub from './sub'\n\nconst sin = pointwise(Math.sin)\n\nfunction csin(x) {\n  if (x.im) {\n    return div(sub(exp(x), exp(neg(x))), new Complex(0,2))\n    // return x.exp().sub(x.neg().exp()).div(new Complex(0, 2));\n  }\n  return new Complex(sin(x.re));\n}\n\nfunction ssin(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: sin(x.val),\n  })\n}\n\n/**\n * Pointwise Math.sin(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * sin(1)\n * // returns Math.sin(1)\n * sin([1, 2])\n * // returns [Math.sin(1), Math.sin(2)]\n * sin([[1,2],[1,3]])\n * // returns [ [Math.sin(1), Math.sin(2)], [Math.sin(1), Math.sin(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return csin(m);\n    case 'Sparse':\n      return ssin(m);\n    default:\n      return sin(m);\n  }\n}\n"
  },
  {
    "__docId__": 271,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sin",
    "memberof": "src/sin.js",
    "longname": "src/sin.js~sin",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/sin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "csin",
    "memberof": "src/sin.js",
    "longname": "src/sin.js~csin",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/sin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 273,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ssin",
    "memberof": "src/sin.js",
    "longname": "src/sin.js~ssin",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/sin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 274,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sin",
    "memberof": "src/sin.js",
    "longname": "src/sin.js~sin",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/sin.js",
    "importStyle": "sin",
    "description": "Pointwise Math.sin(x)",
    "examples": [
      "\nsin(1)\n// returns Math.sin(1)\nsin([1, 2])\n// returns [Math.sin(1), Math.sin(2)]\nsin([[1,2],[1,3]])\n// returns [ [Math.sin(1), Math.sin(2)], [Math.sin(1), Math.sin(3)] ]"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 275,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sqrt.js",
    "memberof": null,
    "longname": "src/sqrt.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Sparse from './Sparse'\n\nconst sqrt = pointwise(Math.sqrt)\n\nfunction csqrt(x) {\n  throw new Error('mathlab.sqrt: no sqrt for complex number')\n}\n\nfunction ssqrt(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: sqrt(x.val),\n  })\n}\n\n/**\n * Pointwise Math.sqrt(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * sqrt(1)\n * // returns Math.sqrt(1)\n * sqrt([1, 2])\n * // returns [Math.sqrt(1), Math.sqrt(2)]\n * sqrt([[1,2],[1,3]])\n * // returns [ [Math.sqrt(1), Math.sqrt(2)], [Math.sqrt(1), Math.sqrt(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return csqrt(m);\n    case 'Sparse':\n      return ssqrt(m);\n    default:\n      return sqrt(m);\n  }\n}\n"
  },
  {
    "__docId__": 276,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sqrt",
    "memberof": "src/sqrt.js",
    "longname": "src/sqrt.js~sqrt",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/sqrt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "csqrt",
    "memberof": "src/sqrt.js",
    "longname": "src/sqrt.js~csqrt",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/sqrt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 278,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ssqrt",
    "memberof": "src/sqrt.js",
    "longname": "src/sqrt.js~ssqrt",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/sqrt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 279,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sqrt",
    "memberof": "src/sqrt.js",
    "longname": "src/sqrt.js~sqrt",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/sqrt.js",
    "importStyle": "sqrt",
    "description": "Pointwise Math.sqrt(x)",
    "examples": [
      "\nsqrt(1)\n// returns Math.sqrt(1)\nsqrt([1, 2])\n// returns [Math.sqrt(1), Math.sqrt(2)]\nsqrt([[1,2],[1,3]])\n// returns [ [Math.sqrt(1), Math.sqrt(2)], [Math.sqrt(1), Math.sqrt(3)] ]"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 280,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sub.js",
    "memberof": null,
    "longname": "src/sub.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import pointwise from './pointwise'\nimport Complex from './Complex'\nimport neg from './neg'\n\nconst sub = pointwise((x, y) => x - y);\n\nfunction csub(x, y) {\n  if (!(y instanceof Complex)) { y = new Complex(y); }\n  if (x.im) {\n    if (y.im) {\n      return new Complex(sub(x.re, y.re), sub(x.im, y.im));\n    }\n    return new Complex(sub(x.re, y.re), x.im);\n  }\n  if (y.im) {\n    return new Complex(sub(x.re, y.re), neg(y.im));\n  }\n  return new Complex(sub(x.re, y.re));\n}\n\nfunction ssub(x, y) {\n  throw new Error('mathlab.sub: sub for sparse matrix not exist')\n}\n\n/**\n * Pointwise sub\n * \n * @export\n * @param {Number|Array} m1\n * @param {Number|Array} m2\n * @returns {Number|Array}\n * @example \n * \n * sub(1, 2)\n * // returns 1 - 2\n * sub([1, 2], [2, 2])\n * // returns [1 - 2, 2 - 2]\n * sub([[2,1], [1,2]], [[2, 2], [2, 2]]))\n * // returns [ [2 - 2, 1 - 2], [1 - 2, 2 - 2] ]\n */\nexport default function (m1, m2) {\n  switch (m1.constructor.name) {\n    case 'Complex':\n      return csub(m1, m2);\n    case 'Sparse':\n      return ssub(m1, m2);\n    default:\n      return sub(m1, m2);\n  }\n}"
  },
  {
    "__docId__": 281,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sub",
    "memberof": "src/sub.js",
    "longname": "src/sub.js~sub",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/sub.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "csub",
    "memberof": "src/sub.js",
    "longname": "src/sub.js~csub",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/sub.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 283,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ssub",
    "memberof": "src/sub.js",
    "longname": "src/sub.js~ssub",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/sub.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 284,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sub",
    "memberof": "src/sub.js",
    "longname": "src/sub.js~sub",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/sub.js",
    "importStyle": "sub",
    "description": "Pointwise sub",
    "examples": [
      "\nsub(1, 2)\n// returns 1 - 2\nsub([1, 2], [2, 2])\n// returns [1 - 2, 2 - 2]\nsub([[2,1], [1,2]], [[2, 2], [2, 2]]))\n// returns [ [2 - 2, 1 - 2], [1 - 2, 2 - 2] ]"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 285,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tan.js",
    "memberof": null,
    "longname": "src/tan.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport pointwise from './pointwise'\nimport Sparse from './Sparse'\n\nconst tan = pointwise(Math.tan)\n\nfunction ctan(x) {\n  // TODO\n  throw new Error('mathlab.tan: no tan for complex number')\n}\n\nfunction stan(x) {\n  return new Sparse({\n    col: x.col.slice(), // copy the array\n    row: x.row.slice(),\n    val: tan(x.val),\n  })\n}\n\n/**\n * Pointwise Math.tan(x)\n * \n * @export\n * @param {Number|Array} m\n * @returns {Number|Array}\n * @example \n * \n * tan(1)\n * // returns Math.tan(1)\n * tan([1, 2])\n * // returns [Math.tan(1), Math.tan(2)]\n * tan([[1,2],[1,3]])\n * // returns [ [Math.tan(1), Math.tan(2)], [Math.tan(1), Math.tan(3)] ]\n */\nexport default function (m) {\n  switch (m.constructor.name) {\n    case 'Complex':\n      return ctan(m);\n    case 'Sparse':\n      return stan(m);\n    default:\n      return tan(m);\n  }\n}\n"
  },
  {
    "__docId__": 286,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "tan",
    "memberof": "src/tan.js",
    "longname": "src/tan.js~tan",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/tan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ctan",
    "memberof": "src/tan.js",
    "longname": "src/tan.js~ctan",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/tan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 288,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "stan",
    "memberof": "src/tan.js",
    "longname": "src/tan.js~stan",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/tan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 289,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tan",
    "memberof": "src/tan.js",
    "longname": "src/tan.js~tan",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/tan.js",
    "importStyle": "tan",
    "description": "Pointwise Math.tan(x)",
    "examples": [
      "\ntan(1)\n// returns Math.tan(1)\ntan([1, 2])\n// returns [Math.tan(1), Math.tan(2)]\ntan([[1,2],[1,3]])\n// returns [ [Math.tan(1), Math.tan(2)], [Math.tan(1), Math.tan(3)] ]"
    ],
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 290,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/tensor.js",
    "memberof": null,
    "longname": "src/tensor.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import mul from './mul'\nimport dim from './dim'\n\n/**\n * Tensor product ret[i][j] = x[i]*y[j]\n * \n * @export\n * @param {Array|Number} x\n * @param {Array|Number} y\n * @returns {Array|Number}\n * @example \n * \n * tensor([1,2],[3,4])\n * // [[1,4],\n * //  [6,8]]\n */\nexport default function tensor(x,y) {\n    if(typeof x === \"number\" || typeof y === \"number\") return mul(x,y);\n    var s1 = dim(x), s2 = dim(y);\n    if(s1.length !== 1 || s2.length !== 1) {\n        throw new Error('Mathlab.tensor: tensor product is only defined for vectors');\n    }\n    var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;\n    for(i=m-1;i>=0;i--) {\n        Ai = Array(n);\n        xi = x[i];\n        for(j=n-1;j>=3;--j) {\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n        }\n        while(j>=0) { Ai[j] = xi * y[j]; --j; }\n        A[i] = Ai;\n    }\n    return A;\n}"
  },
  {
    "__docId__": 291,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "tensor",
    "memberof": "src/tensor.js",
    "longname": "src/tensor.js~tensor",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/tensor.js",
    "importStyle": "tensor",
    "description": "Tensor product ret[i][j] = x[i]*y[j]",
    "examples": [
      "\ntensor([1,2],[3,4])\n// [[1,4],\n//  [6,8]]"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array|Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array",
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 292,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/transpose.js",
    "memberof": null,
    "longname": "src/transpose.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Complex from './Complex'\n\n/**\n * Matrix transpose\n * \n * @export\n * @param {Array} x\n * @returns {Array}\n * @example \n * \n * transpose([[1,2,3],[4,5,6]])\n * //[[1,4],\n * // [2,5],\n * // [3,6]]\n */\nexport default function (x) {\n  switch (x.constructor.name) {\n    case 'Complex':\n      return ctranspose(x);\n    case 'Sparse':\n      return stranspose(x);\n    default:\n      return transpose(x);\n  }\n}\n\nfunction ctranspose(x) {\n  // TODO: Check if is matrix\n    var t = transpose;\n    if (x.im) {\n      return new Complex(t(x.re), t(x.im));\n    }\n    return new Complex(t(x.re));\n}\n\nfunction stranspose(x) {\n  throw new Error('mathlab.transpose: transpose for sparse matrix not exist')\n}\n\nfunction transpose (x) {\n  var i,j,m = x.length,n = x[0].length, ret = Array(n),A0,A1,Bj\n  for (j = 0;j < n;j++) ret[j] = Array(m)\n  for (i = m - 1;i >= 1;i -= 2) {\n    A1 = x[i]\n    A0 = x[i - 1]\n    for (j = n - 1;j >= 1;--j) {\n      Bj = ret[j]; Bj[i] = A1[j]; Bj[i - 1] = A0[j]\n      --j\n      Bj = ret[j]; Bj[i] = A1[j]; Bj[i - 1] = A0[j]\n    }\n    if (j === 0) {\n      Bj = ret[0]; Bj[i] = A1[0]; Bj[i - 1] = A0[0]\n    }\n  }\n  if (i === 0) {\n    A0 = x[0]\n    for (j = n - 1;j >= 1;--j) {\n      ret[j][0] = A0[j]\n      --j\n      ret[j][0] = A0[j]\n    }\n    if (j === 0) { ret[0][0] = A0[0]; }\n  }\n  return ret\n}\n"
  },
  {
    "__docId__": 293,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpose",
    "memberof": "src/transpose.js",
    "longname": "src/transpose.js~transpose",
    "access": null,
    "export": true,
    "importPath": "mathlab/src/transpose.js",
    "importStyle": "transpose",
    "description": "Matrix transpose",
    "examples": [
      "\ntranspose([[1,2,3],[4,5,6]])\n//[[1,4],\n// [2,5],\n// [3,6]]"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@export",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 294,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ctranspose",
    "memberof": "src/transpose.js",
    "longname": "src/transpose.js~ctranspose",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/transpose.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 295,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "stranspose",
    "memberof": "src/transpose.js",
    "longname": "src/transpose.js~stranspose",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/transpose.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 296,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transpose",
    "memberof": "src/transpose.js",
    "longname": "src/transpose.js~transpose",
    "access": null,
    "export": false,
    "importPath": "mathlab/src/transpose.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 298,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 299,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 300,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 301,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 302,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 303,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 304,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 305,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 306,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 307,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 308,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 309,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 310,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 311,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 312,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 313,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 314,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 315,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 316,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 317,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 318,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 319,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 320,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 321,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 322,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 323,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 324,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 325,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 326,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 327,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 328,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 329,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 330,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 331,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 332,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 333,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 334,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 335,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 336,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 337,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 338,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 339,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 340,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 341,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 342,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 343,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 344,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 346,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 347,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 348,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 349,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 350,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 351,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 352,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 353,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]